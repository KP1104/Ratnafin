[{"D:\\Ratnaafin\\Ratnafin\\src\\index.tsx":"1","D:\\Ratnaafin\\Ratnafin\\src\\serviceWorker.ts":"2","D:\\Ratnaafin\\Ratnafin\\src\\mock\\index.ts":"3","D:\\Ratnaafin\\Ratnafin\\src\\app\\crm\\index.tsx":"4","D:\\Ratnaafin\\Ratnafin\\src\\app\\los\\index.tsx":"5","D:\\Ratnaafin\\Ratnafin\\src\\mock\\retailsLoan.ts":"6","D:\\Ratnaafin\\Ratnafin\\src\\app\\crm\\app.tsx":"7","D:\\Ratnaafin\\Ratnafin\\src\\app\\los\\app.tsx":"8","D:\\Ratnaafin\\Ratnafin\\src\\app\\crm\\theme.ts":"9","D:\\Ratnaafin\\Ratnafin\\src\\app\\los\\theme.ts":"10","D:\\Ratnaafin\\Ratnafin\\src\\registry\\fns\\sdk.ts":"11","D:\\Ratnaafin\\Ratnafin\\src\\registry\\yup\\index.ts":"12","D:\\Ratnaafin\\Ratnafin\\src\\registry\\fns\\index.ts":"13","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\index.tsx":"14","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\index.tsx":"15","D:\\Ratnaafin\\Ratnafin\\src\\registry\\fns\\pincode.ts":"16","D:\\Ratnaafin\\Ratnafin\\src\\registry\\fns\\others.ts":"17","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\style.ts":"18","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\CAM\\SMELoans\\CC_OD\\CC_ODFormWrapper.tsx":"19","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\footer\\index.ts":"20","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leads\\index.js":"21","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\drawer\\index.ts":"22","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\index.tsx":"23","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leadaction\\index.ts":"24","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\index.ts":"25","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\dashboard\\index.ts":"26","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\profile\\index.ts":"27","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\login\\index.ts":"28","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\header\\index.tsx":"29","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\index.ts":"30","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\appBar\\index.tsx":"31","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\sideBar\\index.tsx":"32","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\content\\index.tsx":"33","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leads\\lead.js":"34","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\CAM\\SMELoans\\CC_OD\\CC_ODMetaData.tsx":"35","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\CAM\\SMELoans\\CC_OD\\formPreview.tsx":"36","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\footer\\footer.tsx":"37","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\style.ts":"38","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\sideBar\\metaData.ts":"39","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\sideBar\\icons.ts":"40","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\content\\style.ts":"41","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\dashboard\\dashboard.tsx":"42","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\home.tsx":"43","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\profile\\changePassword.tsx":"44","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\profile\\profile.tsx":"45","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\index.tsx":"46","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leadaction\\leadaction.tsx":"47","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\login\\login.tsx":"48","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\drawer\\drawer.tsx":"49","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\detailsTabPanel.tsx":"50","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\header\\header.tsx":"51","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\listing.tsx":"52","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\inquiryDetail.tsx":"53","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\appBar\\appBar.tsx":"54","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leads\\displayData.js":"55","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\CAM\\SMELoans\\CC_OD\\style.ts":"56","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\footer\\style.ts":"57","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\inquiryForms\\index.ts":"58","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\notFound\\index.ts":"59","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\login\\index.ts":"60","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\thankyou\\index.ts":"61","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\becomePartner\\index.ts":"62","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\otpVerificationDialog\\index.ts":"63","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\aadharVerification\\index.ts":"64","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\equifax\\index.ts":"65","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\profile\\style.ts":"66","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\login\\style.ts":"67","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\header\\style.ts":"68","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\drawer\\style.ts":"69","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\dashboard\\variants.tsx":"70","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\header\\metaData.ts":"71","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\style.ts":"72","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\appBar\\style.ts":"73","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\cache.ts":"74","D:\\Ratnaafin\\Ratnafin\\src\\components\\navigation\\sideBarNavigation.tsx":"75","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\viewEditCompositeComponent.tsx":"76","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leadaction\\tabs\\index.ts":"77","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\equifax\\equifax.tsx":"78","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\becomePartner\\becomePartnerForm.tsx":"79","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\detailsTabs\\index.ts":"80","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\becomePartner\\becomePartnerPage.tsx":"81","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\thankyou\\thankyou.tsx":"82","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\notFound\\notFound.tsx":"83","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\aadharVerification\\aadharVerificationIFrame.tsx":"84","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\inquiryForms\\inquieryForms.tsx":"85","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\otpVerificationDialog\\otpVerificationDialog.tsx":"86","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\login\\login.tsx":"87","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\convertInquirytolead\\index.tsx":"88","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\customerDetails\\index.tsx":"89","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\formView.tsx":"90","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\formEdit.tsx":"91","D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\tooltip\\index.ts":"92","D:\\Ratnaafin\\Ratnafin\\src\\components\\navigation\\index.ts":"93","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\becomePartner\\metaData.ts":"94","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\notFound\\style.ts":"95","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\thankyou\\style.ts":"96","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leadaction\\tabs\\tabs.tsx":"97","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\inquiryForms\\style.ts":"98","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\becomePartner\\style.ts":"99","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\login\\style.ts":"100","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\utils\\navHelpers.ts":"101","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\otpVerificationDialog\\style.ts":"102","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\inquiryForms\\confirmationBox.tsx":"103","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\equifax\\style.ts":"104","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\detailsTabs\\tabs.tsx":"105","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\convertInquirytolead\\inquiryToLead.tsx":"106","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\customerDetails\\customerDetail.tsx":"107","D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\tooltip\\tooltip.tsx":"108","D:\\Ratnaafin\\Ratnafin\\src\\components\\navigation\\types.ts":"109","D:\\Ratnaafin\\Ratnafin\\src\\components\\navigation\\bootstrapNavigation.tsx":"110","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leadaction\\tabs\\style.ts":"111","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leadaction\\tabs\\tabCustomer.tsx":"112","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leadaction\\tabs\\tabInformation.tsx":"113","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\detailsTabs\\style.ts":"114","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\convertInquirytolead\\style.tsx":"115","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\customerDetails\\style.tsx":"116","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\utils\\transformMetaDataForEdit.ts":"117","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\detailsTabs\\tabCustomer.tsx":"118","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\detailsTabs\\tabInformation.tsx":"119","D:\\Ratnaafin\\Ratnafin\\src\\components\\navigation\\style.ts":"120","D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\textfield\\index.ts":"121","D:\\Ratnaafin\\Ratnafin\\src\\components\\derived\\inputMask\\index.ts":"122","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leadaction\\tabs\\editor.tsx":"123","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\leadForm.tsx":"124","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\customerForm.tsx":"125","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\customerInformation.tsx":"126","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\leadInformation.tsx":"127","D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\textfield\\textField.tsx":"128","D:\\Ratnaafin\\Ratnafin\\src\\components\\derived\\inputMask\\maskInputField.tsx":"129","D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\tab\\index.ts":"130","D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\tabs\\index.ts":"131","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\style.ts":"132","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\detailsTabs\\editor.tsx":"133","D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\tabs\\tabs.tsx":"134","D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\tab\\tab.tsx":"135","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\textField\\index.ts":"136","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\textField\\textField.tsx":"137","D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\index.ts":"138","D:\\Ratnaafin\\Ratnafin\\src\\packages\\form\\index.ts":"139","D:\\Ratnaafin\\Ratnafin\\src\\packages\\form\\src\\util.ts":"140","D:\\Ratnaafin\\Ratnafin\\src\\packages\\form\\src\\fieldArray.ts":"141","D:\\Ratnaafin\\Ratnafin\\src\\packages\\form\\src\\atoms.ts":"142","D:\\Ratnaafin\\Ratnafin\\src\\packages\\form\\src\\field.ts":"143","D:\\Ratnaafin\\Ratnafin\\src\\packages\\form\\src\\form.ts":"144","D:\\Ratnaafin\\Ratnafin\\src\\packages\\form\\src\\context.ts":"145","D:\\Ratnaafin\\Ratnafin\\src\\packages\\form\\src\\types.ts":"146","D:\\Ratnaafin\\Ratnafin\\src\\packages\\form\\src\\observer.tsx":"147","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\types.ts":"148","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\validateMetaData.ts":"149","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\functionRegistry.ts":"150","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\attachMethodsToMetaData.ts":"151","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\formWrapper.tsx":"152","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\dashboard\\style.ts":"153","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\jsonRuleEngine.ts":"154","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\view\\index.ts":"155","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\constructYupSchema.ts":"156","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\fixSequenceInMetaData.ts":"157","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\extendedFieldTypes.ts":"158","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\constructINITValues.ts":"159","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\extendedTypes.ts":"160","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\groupWiserenderer.tsx":"161","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\groupedForms.tsx":"162","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\simpleForm.tsx":"163","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\coreProducts\\index.ts":"164","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\index.tsx":"165","D:\\Ratnaafin\\Ratnafin\\src\\assets\\icons\\productIcons.tsx":"166","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\view\\wrapper.tsx":"167","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\style.ts":"168","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\valueRenderer.tsx":"169","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\fieldRenderer.tsx":"170","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\tabsForm.tsx":"171","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\stepperForm.tsx":"172","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\coreProducts\\coreProducts.tsx":"173","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\types.ts":"174","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\gridWrapper.tsx":"175","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\attachValuesToMetaData.ts":"176","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\view\\groupedView.tsx":"177","D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\view\\simpleView.tsx":"178","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\coreProducts\\metaData.ts":"179","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\coreProducts\\style.ts":"180","D:\\Ratnaafin\\Ratnafin\\src\\registry\\rulesEngine\\index.ts":"181","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\gridController.tsx":"182","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\utils\\index.ts":"183","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\grid.tsx":"184","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\spacer\\index.ts":"185","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\rating\\index.ts":"186","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\slider\\index.ts":"187","D:\\Ratnaafin\\Ratnafin\\src\\components\\derived\\numberFormat\\index.ts":"188","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\toggleButtonGroup\\index.ts":"189","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\radio\\index.ts":"190","D:\\Ratnaafin\\Ratnafin\\src\\components\\derived\\passwordField\\index.ts":"191","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\valueField\\index.ts":"192","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\select\\index.ts":"193","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\datetime\\index.ts":"194","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\switch\\index.ts":"195","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\checkbox\\index.ts":"196","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\autocomplete\\index.tsx":"197","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\utils\\attachAlignmentProps.ts":"198","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\utils\\extractHiddenColumns.ts":"199","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\utils\\attachCellComponentsToMetaData.ts":"200","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\utils\\attachGlobalFilterProps.ts":"201","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\utils\\attachFilterProps.ts":"202","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\utils\\sortColumnBySequence.ts":"203","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\utils\\utils.ts":"204","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\utils\\splitActions.ts":"205","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\index.ts":"206","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\filters\\index.ts":"207","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\atoms\\index.ts":"208","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\tablePaginationToolbar.tsx":"209","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\backdrop.tsx":"210","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\tableHeaderToolbar.tsx":"211","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\headerCellWrapper.tsx":"212","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\linerProgressBarSpacer.tsx":"213","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\focusableTableRow.tsx":"214","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\stickyTableHead.tsx":"215","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\rowCellWrapper.tsx":"216","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\tableHeaderFilterToolbar.tsx":"217","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\tableActionToolbar.tsx":"218","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\spacer\\spacer.tsx":"219","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\toggleButtonGroup\\toggleButtonGroup.tsx":"220","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\rating\\rating.tsx":"221","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\slider\\slider.tsx":"222","D:\\Ratnaafin\\Ratnafin\\src\\components\\derived\\passwordField\\passwordField.tsx":"223","D:\\Ratnaafin\\Ratnafin\\src\\components\\derived\\numberFormat\\numberFormat.tsx":"224","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\valueField\\valueField.tsx":"225","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\radio\\radio.tsx":"226","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\select\\select.tsx":"227","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\switch\\switchGroup.tsx":"228","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\datetime\\timePicker.tsx":"229","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\datetime\\datePicker.tsx":"230","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\datetime\\datetimePicker.tsx":"231","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\switch\\switch.tsx":"232","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\checkbox\\checkbox.tsx":"233","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\checkbox\\checkboxGroup.tsx":"234","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\autocomplete\\autocomplete.tsx":"235","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\defaultHeaderColumnRenderer.tsx":"236","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\useCheckbox.tsx":"237","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\useSequence.tsx":"238","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\filters\\registration.tsx":"239","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\filters\\valueFilter.tsx":"240","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\filters\\rangeFilter.tsx":"241","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\filters\\optionsFilter.tsx":"242","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\columnVisibility.tsx":"243","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\cells\\index.ts":"244","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\filters\\style.ts":"245","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\globalFilters\\index.ts":"246","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\filters\\filterContainer.tsx":"247","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\filters\\styledComponents.tsx":"248","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\utils\\index.ts":"249","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\cells\\currencyRowCellRenderer.tsx":"250","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\cells\\defaultRowCellRenderer.tsx":"251","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\utils\\optionsFetcher.ts":"252","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\utils\\utils.ts":"253","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\cells\\dateRowCellRenderer.tsx":"254","D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\toggleButtonGroup\\index.ts":"255","D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\checkbox\\index.ts":"256","D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\datetime\\index.ts":"257","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\globalFilters\\groupByExclusiveFilter.tsx":"258","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\globalFilters\\dateRangeFilter.tsx":"259","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\globalFilters\\groupByMultipleFilter.tsx":"260","D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\toggleButtonGroup\\toggleButtonGroup.ts":"261","D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\checkbox\\checkbox.ts":"262","D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\datetime\\dateTimePicker.ts":"263","D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\datetime\\datePicker.ts":"264","D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\datetime\\timePicker.ts":"265","D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\datetime\\styles.ts":"266"},{"size":1253,"mtime":1610342015967,"results":"267","hashOfConfig":"268"},{"size":5444,"mtime":1607405262874,"results":"269","hashOfConfig":"268"},{"size":949,"mtime":1607405288783,"results":"270","hashOfConfig":"268"},{"size":41,"mtime":1607405288733,"results":"271","hashOfConfig":"268"},{"size":41,"mtime":1607405288738,"results":"272","hashOfConfig":"268"},{"size":10241,"mtime":1607405288784,"results":"273","hashOfConfig":"268"},{"size":496,"mtime":1609499185680,"results":"274","hashOfConfig":"268"},{"size":418,"mtime":1609499185681,"results":"275","hashOfConfig":"268"},{"size":4463,"mtime":1607405288734,"results":"276","hashOfConfig":"268"},{"size":3780,"mtime":1607405288739,"results":"277","hashOfConfig":"268"},{"size":22266,"mtime":1610342016301,"results":"278","hashOfConfig":"268"},{"size":426,"mtime":1610342016302,"results":"279","hashOfConfig":"268"},{"size":3668,"mtime":1610086237317,"results":"280","hashOfConfig":"268"},{"size":305,"mtime":1607405288794,"results":"281","hashOfConfig":"268"},{"size":2318,"mtime":1610342016120,"results":"282","hashOfConfig":"268"},{"size":10102,"mtime":1610086237317,"results":"283","hashOfConfig":"268"},{"size":1978,"mtime":1610086237317,"results":"284","hashOfConfig":"268"},{"size":154,"mtime":1607405288831,"results":"285","hashOfConfig":"268"},{"size":1499,"mtime":1609936369564,"results":"286","hashOfConfig":"268"},{"size":47,"mtime":1607405288787,"results":"287","hashOfConfig":"268"},{"size":51,"mtime":1610000531514,"results":"288","hashOfConfig":"268"},{"size":48,"mtime":1607405288813,"results":"289","hashOfConfig":"268"},{"size":2405,"mtime":1610774092862,"results":"290","hashOfConfig":"268"},{"size":49,"mtime":1607405288818,"results":"291","hashOfConfig":"268"},{"size":62,"mtime":1610086237317,"results":"292","hashOfConfig":"268"},{"size":53,"mtime":1607405288816,"results":"293","hashOfConfig":"268"},{"size":63,"mtime":1608785324729,"results":"294","hashOfConfig":"268"},{"size":45,"mtime":1607405288826,"results":"295","hashOfConfig":"268"},{"size":47,"mtime":1609499185681,"results":"296","hashOfConfig":"268"},{"size":65,"mtime":1610000643425,"results":"297","hashOfConfig":"268"},{"size":48,"mtime":1607405288811,"results":"298","hashOfConfig":"268"},{"size":422,"mtime":1609499185697,"results":"299","hashOfConfig":"268"},{"size":457,"mtime":1607405288812,"results":"300","hashOfConfig":"268"},{"size":6363,"mtime":1609936369570,"results":"301","hashOfConfig":"268"},{"size":30226,"mtime":1609410211909,"results":"302","hashOfConfig":"268"},{"size":46575,"mtime":1609936369566,"results":"303","hashOfConfig":"268"},{"size":6800,"mtime":1607405288787,"results":"304","hashOfConfig":"268"},{"size":907,"mtime":1607405288808,"results":"305","hashOfConfig":"268"},{"size":6617,"mtime":1610000643425,"results":"306","hashOfConfig":"268"},{"size":586,"mtime":1607405288829,"results":"307","hashOfConfig":"268"},{"size":333,"mtime":1607405288812,"results":"308","hashOfConfig":"268"},{"size":5752,"mtime":1608785324710,"results":"309","hashOfConfig":"268"},{"size":600,"mtime":1608268975469,"results":"310","hashOfConfig":"268"},{"size":2775,"mtime":1608785324729,"results":"311","hashOfConfig":"268"},{"size":9950,"mtime":1608785324729,"results":"312","hashOfConfig":"268"},{"size":421,"mtime":1609419526680,"results":"313","hashOfConfig":"268"},{"size":3113,"mtime":1608269099646,"results":"314","hashOfConfig":"268"},{"size":6875,"mtime":1610100378873,"results":"315","hashOfConfig":"268"},{"size":1166,"mtime":1610342016089,"results":"316","hashOfConfig":"268"},{"size":151,"mtime":1608785324729,"results":"317","hashOfConfig":"268"},{"size":4372,"mtime":1609499185681,"results":"318","hashOfConfig":"268"},{"size":1762,"mtime":1610342016279,"results":"319","hashOfConfig":"268"},{"size":2536,"mtime":1610342016249,"results":"320","hashOfConfig":"268"},{"size":5304,"mtime":1610342016069,"results":"321","hashOfConfig":"268"},{"size":6897,"mtime":1610000531454,"results":"322","hashOfConfig":"268"},{"size":1056,"mtime":1609326530999,"results":"323","hashOfConfig":"268"},{"size":952,"mtime":1607405288787,"results":"324","hashOfConfig":"268"},{"size":66,"mtime":1607405288801,"results":"325","hashOfConfig":"268"},{"size":55,"mtime":1607405288806,"results":"326","hashOfConfig":"268"},{"size":45,"mtime":1607405288803,"results":"327","hashOfConfig":"268"},{"size":51,"mtime":1607405288809,"results":"328","hashOfConfig":"268"},{"size":107,"mtime":1607405288797,"results":"329","hashOfConfig":"268"},{"size":75,"mtime":1608785324710,"results":"330","hashOfConfig":"268"},{"size":77,"mtime":1609235367029,"results":"331","hashOfConfig":"268"},{"size":49,"mtime":1610774181630,"results":"332","hashOfConfig":"268"},{"size":1739,"mtime":1607405288828,"results":"333","hashOfConfig":"268"},{"size":1698,"mtime":1607941458203,"results":"334","hashOfConfig":"268"},{"size":778,"mtime":1609499185681,"results":"335","hashOfConfig":"268"},{"size":1348,"mtime":1610342016089,"results":"336","hashOfConfig":"268"},{"size":917,"mtime":1607405288816,"results":"337","hashOfConfig":"268"},{"size":13594,"mtime":1610342016004,"results":"338","hashOfConfig":"268"},{"size":380,"mtime":1610000643410,"results":"339","hashOfConfig":"268"},{"size":2641,"mtime":1607405288812,"results":"340","hashOfConfig":"268"},{"size":91,"mtime":1610342016120,"results":"341","hashOfConfig":"268"},{"size":4840,"mtime":1609499185681,"results":"342","hashOfConfig":"268"},{"size":1389,"mtime":1610342016280,"results":"343","hashOfConfig":"268"},{"size":47,"mtime":1607405288819,"results":"344","hashOfConfig":"268"},{"size":10256,"mtime":1610774062676,"results":"345","hashOfConfig":"268"},{"size":1394,"mtime":1610000643410,"results":"346","hashOfConfig":"268"},{"size":47,"mtime":1608785324729,"results":"347","hashOfConfig":"268"},{"size":1734,"mtime":1609499185697,"results":"348","hashOfConfig":"268"},{"size":1864,"mtime":1609910147686,"results":"349","hashOfConfig":"268"},{"size":1159,"mtime":1607405288807,"results":"350","hashOfConfig":"268"},{"size":5762,"mtime":1610342016020,"results":"351","hashOfConfig":"268"},{"size":6676,"mtime":1610000643410,"results":"352","hashOfConfig":"268"},{"size":6338,"mtime":1610342016055,"results":"353","hashOfConfig":"268"},{"size":15712,"mtime":1610342016036,"results":"354","hashOfConfig":"268"},{"size":34,"mtime":1610100467109,"results":"355","hashOfConfig":"268"},{"size":35,"mtime":1610100467112,"results":"356","hashOfConfig":"268"},{"size":2318,"mtime":1610342016211,"results":"357","hashOfConfig":"268"},{"size":4137,"mtime":1610342016209,"results":"358","hashOfConfig":"268"},{"size":49,"mtime":1607405288781,"results":"359","hashOfConfig":"268"},{"size":104,"mtime":1609499185681,"results":"360","hashOfConfig":"268"},{"size":16605,"mtime":1608550454317,"results":"361","hashOfConfig":"268"},{"size":736,"mtime":1607405288807,"results":"362","hashOfConfig":"268"},{"size":1205,"mtime":1607405288809,"results":"363","hashOfConfig":"268"},{"size":5410,"mtime":1608785324727,"results":"364","hashOfConfig":"268"},{"size":196,"mtime":1607405288802,"results":"365","hashOfConfig":"268"},{"size":1427,"mtime":1607405288798,"results":"366","hashOfConfig":"268"},{"size":1404,"mtime":1607405288804,"results":"367","hashOfConfig":"268"},{"size":1858,"mtime":1609910147687,"results":"368","hashOfConfig":"268"},{"size":670,"mtime":1609235367044,"results":"369","hashOfConfig":"268"},{"size":906,"mtime":1609419526686,"results":"370","hashOfConfig":"268"},{"size":1300,"mtime":1610545090680,"results":"371","hashOfConfig":"268"},{"size":1685,"mtime":1610000643425,"results":"372","hashOfConfig":"268"},{"size":4204,"mtime":1610342016151,"results":"373","hashOfConfig":"268"},{"size":3470,"mtime":1610342016151,"results":"374","hashOfConfig":"268"},{"size":550,"mtime":1607405288782,"results":"375","hashOfConfig":"268"},{"size":852,"mtime":1609499185681,"results":"376","hashOfConfig":"268"},{"size":7067,"mtime":1609499185681,"results":"377","hashOfConfig":"268"},{"size":1734,"mtime":1607662158056,"results":"378","hashOfConfig":"268"},{"size":5095,"mtime":1608785324726,"results":"379","hashOfConfig":"268"},{"size":4493,"mtime":1608269099646,"results":"380","hashOfConfig":"268"},{"size":394,"mtime":1608785324729,"results":"381","hashOfConfig":"268"},{"size":1426,"mtime":1610100467109,"results":"382","hashOfConfig":"268"},{"size":470,"mtime":1610100467112,"results":"383","hashOfConfig":"268"},{"size":1069,"mtime":1610086237317,"results":"384","hashOfConfig":"268"},{"size":720,"mtime":1610020474132,"results":"385","hashOfConfig":"268"},{"size":699,"mtime":1608785324729,"results":"386","hashOfConfig":"268"},{"size":2835,"mtime":1609499185681,"results":"387","hashOfConfig":"268"},{"size":53,"mtime":1607405262858,"results":"388","hashOfConfig":"268"},{"size":173,"mtime":1607405262816,"results":"389","hashOfConfig":"268"},{"size":912,"mtime":1607941458199,"results":"390","hashOfConfig":"268"},{"size":3035,"mtime":1608785324729,"results":"391","hashOfConfig":"268"},{"size":1363,"mtime":1608785324729,"results":"392","hashOfConfig":"268"},{"size":1571,"mtime":1608785324729,"results":"393","hashOfConfig":"268"},{"size":1426,"mtime":1608785324842,"results":"394","hashOfConfig":"268"},{"size":1458,"mtime":1607405288781,"results":"395","hashOfConfig":"268"},{"size":1090,"mtime":1607405262817,"results":"396","hashOfConfig":"268"},{"size":41,"mtime":1610000643407,"results":"397","hashOfConfig":"268"},{"size":43,"mtime":1610000643409,"results":"398","hashOfConfig":"268"},{"size":1640,"mtime":1608785324843,"results":"399","hashOfConfig":"268"},{"size":912,"mtime":1608785324729,"results":"400","hashOfConfig":"268"},{"size":539,"mtime":1610000643410,"results":"401","hashOfConfig":"268"},{"size":834,"mtime":1610000643408,"results":"402","hashOfConfig":"268"},{"size":134,"mtime":1607405262806,"results":"403","hashOfConfig":"268"},{"size":4915,"mtime":1610086237302,"results":"404","hashOfConfig":"268"},{"size":30,"mtime":1607405262857,"results":"405","hashOfConfig":"268"},{"size":248,"mtime":1607405262863,"results":"406","hashOfConfig":"268"},{"size":2891,"mtime":1607405262866,"results":"407","hashOfConfig":"268"},{"size":13996,"mtime":1607405262864,"results":"408","hashOfConfig":"268"},{"size":8835,"mtime":1610086237305,"results":"409","hashOfConfig":"268"},{"size":24414,"mtime":1610342015989,"results":"410","hashOfConfig":"268"},{"size":12863,"mtime":1609396193872,"results":"411","hashOfConfig":"268"},{"size":318,"mtime":1609396193858,"results":"412","hashOfConfig":"268"},{"size":3660,"mtime":1609396193874,"results":"413","hashOfConfig":"268"},{"size":1100,"mtime":1607405262865,"results":"414","hashOfConfig":"268"},{"size":5228,"mtime":1610342015967,"results":"415","hashOfConfig":"268"},{"size":1611,"mtime":1608785324710,"results":"416","hashOfConfig":"268"},{"size":855,"mtime":1607405262852,"results":"417","hashOfConfig":"268"},{"size":5970,"mtime":1609396193845,"results":"418","hashOfConfig":"268"},{"size":3454,"mtime":1610342015751,"results":"419","hashOfConfig":"268"},{"size":2136,"mtime":1607405288816,"results":"420","hashOfConfig":"268"},{"size":1595,"mtime":1610086237305,"results":"421","hashOfConfig":"268"},{"size":28,"mtime":1609419526683,"results":"422","hashOfConfig":"268"},{"size":2024,"mtime":1608353808887,"results":"423","hashOfConfig":"268"},{"size":453,"mtime":1607405288776,"results":"424","hashOfConfig":"268"},{"size":1165,"mtime":1609396193846,"results":"425","hashOfConfig":"268"},{"size":697,"mtime":1607405262851,"results":"426","hashOfConfig":"268"},{"size":4916,"mtime":1608709413338,"results":"427","hashOfConfig":"268"},{"size":2490,"mtime":1609824324616,"results":"428","hashOfConfig":"268"},{"size":5875,"mtime":1610342015804,"results":"429","hashOfConfig":"268"},{"size":2246,"mtime":1610342015859,"results":"430","hashOfConfig":"268"},{"size":59,"mtime":1607405288799,"results":"431","hashOfConfig":"268"},{"size":83,"mtime":1610000643406,"results":"432","hashOfConfig":"268"},{"size":48907,"mtime":1607405288741,"results":"433","hashOfConfig":"268"},{"size":3072,"mtime":1610342015967,"results":"434","hashOfConfig":"268"},{"size":1382,"mtime":1609396193838,"results":"435","hashOfConfig":"268"},{"size":1369,"mtime":1609235367029,"results":"436","hashOfConfig":"268"},{"size":4415,"mtime":1609235367029,"results":"437","hashOfConfig":"268"},{"size":1992,"mtime":1610342015904,"results":"438","hashOfConfig":"268"},{"size":2307,"mtime":1610342015877,"results":"439","hashOfConfig":"268"},{"size":1596,"mtime":1607405288798,"results":"440","hashOfConfig":"268"},{"size":1975,"mtime":1610342015704,"results":"441","hashOfConfig":"268"},{"size":2740,"mtime":1610342015666,"results":"442","hashOfConfig":"268"},{"size":446,"mtime":1609235367029,"results":"443","hashOfConfig":"268"},{"size":1477,"mtime":1610086237305,"results":"444","hashOfConfig":"268"},{"size":963,"mtime":1610086237305,"results":"445","hashOfConfig":"268"},{"size":2550,"mtime":1610086237317,"results":"446","hashOfConfig":"268"},{"size":1867,"mtime":1607405288800,"results":"447","hashOfConfig":"268"},{"size":568,"mtime":1607405288834,"results":"448","hashOfConfig":"268"},{"size":3999,"mtime":1610342015650,"results":"449","hashOfConfig":"268"},{"size":359,"mtime":1610342015719,"results":"450","hashOfConfig":"268"},{"size":10406,"mtime":1610342015634,"results":"451","hashOfConfig":"268"},{"size":102,"mtime":1607405262798,"results":"452","hashOfConfig":"268"},{"size":120,"mtime":1607405262743,"results":"453","hashOfConfig":"268"},{"size":120,"mtime":1607405262795,"results":"454","hashOfConfig":"268"},{"size":181,"mtime":1607405262820,"results":"455","hashOfConfig":"268"},{"size":177,"mtime":1607405262810,"results":"456","hashOfConfig":"268"},{"size":117,"mtime":1607405262742,"results":"457","hashOfConfig":"268"},{"size":160,"mtime":1607405262823,"results":"458","hashOfConfig":"268"},{"size":64,"mtime":1609235367019,"results":"459","hashOfConfig":"268"},{"size":122,"mtime":1607405262791,"results":"460","hashOfConfig":"268"},{"size":423,"mtime":1607405262739,"results":"461","hashOfConfig":"268"},{"size":251,"mtime":1607405262801,"results":"462","hashOfConfig":"268"},{"size":271,"mtime":1607405262736,"results":"463","hashOfConfig":"268"},{"size":152,"mtime":1607405288749,"results":"464","hashOfConfig":"268"},{"size":440,"mtime":1609910147681,"results":"465","hashOfConfig":"268"},{"size":370,"mtime":1609910147683,"results":"466","hashOfConfig":"268"},{"size":809,"mtime":1609910147681,"results":"467","hashOfConfig":"268"},{"size":1168,"mtime":1609910147682,"results":"468","hashOfConfig":"268"},{"size":1892,"mtime":1609910147682,"results":"469","hashOfConfig":"268"},{"size":464,"mtime":1609910147684,"results":"470","hashOfConfig":"268"},{"size":1434,"mtime":1610342015719,"results":"471","hashOfConfig":"268"},{"size":748,"mtime":1610342015719,"results":"472","hashOfConfig":"268"},{"size":138,"mtime":1609910147674,"results":"473","hashOfConfig":"268"},{"size":127,"mtime":1608709316326,"results":"474","hashOfConfig":"268"},{"size":1296,"mtime":1610342015419,"results":"475","hashOfConfig":"268"},{"size":2221,"mtime":1607931597533,"results":"476","hashOfConfig":"268"},{"size":278,"mtime":1607931597522,"results":"477","hashOfConfig":"268"},{"size":1043,"mtime":1609937111481,"results":"478","hashOfConfig":"268"},{"size":725,"mtime":1607931597528,"results":"479","hashOfConfig":"268"},{"size":421,"mtime":1607931597530,"results":"480","hashOfConfig":"268"},{"size":808,"mtime":1609910147675,"results":"481","hashOfConfig":"268"},{"size":295,"mtime":1608709316669,"results":"482","hashOfConfig":"268"},{"size":765,"mtime":1607931597531,"results":"483","hashOfConfig":"268"},{"size":1868,"mtime":1609910147679,"results":"484","hashOfConfig":"268"},{"size":4244,"mtime":1610342015704,"results":"485","hashOfConfig":"268"},{"size":535,"mtime":1607405262799,"results":"486","hashOfConfig":"268"},{"size":3203,"mtime":1607405288765,"results":"487","hashOfConfig":"268"},{"size":2540,"mtime":1607405288759,"results":"488","hashOfConfig":"268"},{"size":2739,"mtime":1607405288762,"results":"489","hashOfConfig":"268"},{"size":1214,"mtime":1607405262823,"results":"490","hashOfConfig":"268"},{"size":1320,"mtime":1609396193827,"results":"491","hashOfConfig":"268"},{"size":944,"mtime":1609396193815,"results":"492","hashOfConfig":"268"},{"size":4882,"mtime":1609396193791,"results":"493","hashOfConfig":"268"},{"size":5677,"mtime":1609910147665,"results":"494","hashOfConfig":"268"},{"size":5021,"mtime":1609396193801,"results":"495","hashOfConfig":"268"},{"size":2510,"mtime":1607405288756,"results":"496","hashOfConfig":"268"},{"size":2920,"mtime":1607405288752,"results":"497","hashOfConfig":"268"},{"size":2496,"mtime":1607405288753,"results":"498","hashOfConfig":"268"},{"size":2848,"mtime":1607405288763,"results":"499","hashOfConfig":"268"},{"size":2941,"mtime":1607405288750,"results":"500","hashOfConfig":"268"},{"size":5189,"mtime":1609396193790,"results":"501","hashOfConfig":"268"},{"size":7127,"mtime":1610342015419,"results":"502","hashOfConfig":"268"},{"size":4384,"mtime":1609910147669,"results":"503","hashOfConfig":"268"},{"size":842,"mtime":1607931597527,"results":"504","hashOfConfig":"268"},{"size":484,"mtime":1608709316547,"results":"505","hashOfConfig":"268"},{"size":195,"mtime":1608709316466,"results":"506","hashOfConfig":"268"},{"size":2575,"mtime":1609910147671,"results":"507","hashOfConfig":"268"},{"size":5161,"mtime":1609938291729,"results":"508","hashOfConfig":"268"},{"size":5244,"mtime":1610342015481,"results":"509","hashOfConfig":"268"},{"size":2306,"mtime":1609915976338,"results":"510","hashOfConfig":"268"},{"size":127,"mtime":1609910147668,"results":"511","hashOfConfig":"268"},{"size":2010,"mtime":1609396193823,"results":"512","hashOfConfig":"268"},{"size":121,"mtime":1609910147673,"results":"513","hashOfConfig":"268"},{"size":814,"mtime":1609396193816,"results":"514","hashOfConfig":"268"},{"size":1736,"mtime":1608709316505,"results":"515","hashOfConfig":"268"},{"size":61,"mtime":1609396193803,"results":"516","hashOfConfig":"268"},{"size":433,"mtime":1609910147666,"results":"517","hashOfConfig":"268"},{"size":269,"mtime":1609910147668,"results":"518","hashOfConfig":"268"},{"size":3044,"mtime":1610086237303,"results":"519","hashOfConfig":"268"},{"size":559,"mtime":1609396193814,"results":"520","hashOfConfig":"268"},{"size":394,"mtime":1609910147667,"results":"521","hashOfConfig":"268"},{"size":69,"mtime":1607405262859,"results":"522","hashOfConfig":"268"},{"size":60,"mtime":1607405288779,"results":"523","hashOfConfig":"268"},{"size":197,"mtime":1607405262856,"results":"524","hashOfConfig":"268"},{"size":3792,"mtime":1610342015552,"results":"525","hashOfConfig":"268"},{"size":3393,"mtime":1610342015503,"results":"526","hashOfConfig":"268"},{"size":4155,"mtime":1610342015603,"results":"527","hashOfConfig":"268"},{"size":1177,"mtime":1610000643410,"results":"528","hashOfConfig":"268"},{"size":358,"mtime":1607405288779,"results":"529","hashOfConfig":"268"},{"size":288,"mtime":1607405262856,"results":"530","hashOfConfig":"268"},{"size":272,"mtime":1607405262856,"results":"531","hashOfConfig":"268"},{"size":268,"mtime":1607405288781,"results":"532","hashOfConfig":"268"},{"size":917,"mtime":1607405288780,"results":"533","hashOfConfig":"268"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},"ce6smt",{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"557","usedDeprecatedRules":"536"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"562","messages":"563","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"566","usedDeprecatedRules":"536"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"569","messages":"570","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"573","messages":"574","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"575","usedDeprecatedRules":"536"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"578","messages":"579","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"580"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"583","messages":"584","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"585","messages":"586","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"593","messages":"594","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"595","messages":"596","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"597","messages":"598","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"601","messages":"602","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"580"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"627","usedDeprecatedRules":"536"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"630","messages":"631","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"636","usedDeprecatedRules":"536"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"645","usedDeprecatedRules":"536"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"580"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"662","messages":"663","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"664","messages":"665","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"666","messages":"667","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"670","messages":"671","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"672","messages":"673","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"674","messages":"675","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"676","messages":"677","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"678","messages":"679","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"680","messages":"681","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"682","messages":"683","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"684","messages":"685","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"686","messages":"687","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"688","messages":"689","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"692","messages":"693","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"694","messages":"695","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"696","messages":"697","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"698","messages":"699","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"700","messages":"701","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"702","messages":"703","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"704","messages":"705","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"706","messages":"707","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"708","messages":"709","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"710","usedDeprecatedRules":"536"},{"filePath":"711","messages":"712","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"713","messages":"714","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"715","usedDeprecatedRules":"536"},{"filePath":"716","messages":"717","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"718","messages":"719","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"720","messages":"721","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"722","messages":"723","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"724","messages":"725","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"726","messages":"727","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"728","messages":"729","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"730","messages":"731","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"732","messages":"733","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"736","messages":"737","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"738","messages":"739","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"740","messages":"741","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"742","messages":"743","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"744","messages":"745","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"746","messages":"747","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"748","messages":"749","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"750","messages":"751","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"752","messages":"753","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"754","messages":"755","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"756","messages":"757","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"758","messages":"759","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"760","messages":"761","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"762","messages":"763","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"764","messages":"765","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"766","messages":"767","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"768","messages":"769","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"770","messages":"771","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"772","messages":"773","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"774","messages":"775","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"776","messages":"777","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"778","messages":"779","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"780","messages":"781","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"782","messages":"783","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"784","messages":"785","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"786","messages":"787","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"788","messages":"789","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"790","usedDeprecatedRules":"536"},{"filePath":"791","messages":"792","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"793","messages":"794","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"795","messages":"796","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"797","messages":"798","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"799","messages":"800","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"801","messages":"802","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"803","messages":"804","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"805","messages":"806","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"807","messages":"808","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"809","messages":"810","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"790","usedDeprecatedRules":"536"},{"filePath":"811","messages":"812","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"813","messages":"814","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"815","messages":"816","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"817","messages":"818","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"819","messages":"820","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"821","messages":"822","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"823","messages":"824","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"825","messages":"826","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"827","messages":"828","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"829","messages":"830","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"831","usedDeprecatedRules":"536"},{"filePath":"832","messages":"833","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"834","messages":"835","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"836","messages":"837","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"838","messages":"839","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"840","messages":"841","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"842","messages":"843","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"844","messages":"845","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"846","messages":"847","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"848","messages":"849","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"850","messages":"851","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"852","messages":"853","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"854","messages":"855","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"856","messages":"857","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"858","messages":"859","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"860","messages":"861","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"862","messages":"863","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"864","messages":"865","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"866","messages":"867","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"868","messages":"869","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"870","messages":"871","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"872","messages":"873","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"874","messages":"875","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"876","messages":"877","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"878","messages":"879","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"880","messages":"881","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"882","messages":"883","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"884","messages":"885","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"886","messages":"887","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"888","messages":"889","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"890","messages":"891","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"892","messages":"893","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"894","messages":"895","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"896","messages":"897","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"898","messages":"899","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"900","messages":"901","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"902","messages":"903","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"904","messages":"905","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"906","messages":"907","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"908","messages":"909","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"910","usedDeprecatedRules":"536"},{"filePath":"911","messages":"912","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"913","messages":"914","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"915","usedDeprecatedRules":"536"},{"filePath":"916","messages":"917","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"918","messages":"919","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"920","messages":"921","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"922","messages":"923","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"924","messages":"925","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"926","messages":"927","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"928","messages":"929","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"930","messages":"931","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"932","messages":"933","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"934","messages":"935","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"936","messages":"937","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"938","messages":"939","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"940","messages":"941","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"942","messages":"943","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"944","messages":"945","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"946","messages":"947","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"948","messages":"949","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"950","messages":"951","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"952","messages":"953","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"954","messages":"955","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"956","messages":"957","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"958","messages":"959","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"960","messages":"961","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"962","messages":"963","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"964","messages":"965","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"966","messages":"967","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"968","messages":"969","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"970","messages":"971","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"972","messages":"973","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"974","messages":"975","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"976","messages":"977","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"978","messages":"979","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"980","messages":"981","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"982","messages":"983","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"984","messages":"985","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"986","messages":"987","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"988","messages":"989","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"990","messages":"991","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"992","messages":"993","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"994","messages":"995","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"996","messages":"997","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"998","messages":"999","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1000","messages":"1001","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1002","messages":"1003","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1004","messages":"1005","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1006","messages":"1007","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1008","messages":"1009","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1010","messages":"1011","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1012","messages":"1013","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1014","messages":"1015","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1016","messages":"1017","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1018","messages":"1019","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1020","messages":"1021","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1022","messages":"1023","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1024","messages":"1025","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1026","messages":"1027","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1028","messages":"1029","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1030","messages":"1031","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1032","usedDeprecatedRules":"536"},{"filePath":"1033","messages":"1034","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1035","messages":"1036","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1037","messages":"1038","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1039","messages":"1040","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1041","messages":"1042","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1043","messages":"1044","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1045","messages":"1046","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1047","messages":"1048","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1049","messages":"1050","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1051","messages":"1052","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1053","usedDeprecatedRules":"536"},{"filePath":"1054","messages":"1055","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1056","messages":"1057","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1058","messages":"1059","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1060","messages":"1061","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1062","messages":"1063","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1064","messages":"1065","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1066","usedDeprecatedRules":"536"},{"filePath":"1067","messages":"1068","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1069","usedDeprecatedRules":"536"},{"filePath":"1070","messages":"1071","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1072","usedDeprecatedRules":"536"},{"filePath":"1073","messages":"1074","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1075","messages":"1076","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1077","messages":"1078","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1079","messages":"1080","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1081","messages":"1082","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},{"filePath":"1083","messages":"1084","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"536"},"D:\\Ratnaafin\\Ratnafin\\src\\index.tsx",[],["1085","1086"],"D:\\Ratnaafin\\Ratnafin\\src\\serviceWorker.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\mock\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\app\\crm\\index.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\app\\los\\index.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\mock\\retailsLoan.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\app\\crm\\app.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\app\\los\\app.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\app\\crm\\theme.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\app\\los\\theme.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\registry\\fns\\sdk.ts",["1087"],"import { OptionsProps } from \"components/common/types\";\r\n\r\ninterface CommonFetcherResponse {\r\n  data: any;\r\n  status: \"success\" | \"failure\";\r\n}\r\ntype ExternalResponse = any;\r\n\r\ninterface sessionObjType {\r\n  baseURL?: URL;\r\n  loginStatus: boolean;\r\n  token?: any;\r\n}\r\n\r\nconst isBroswer = new Function(\r\n  \"try {return this===window;}catch(e){ return false;}\"\r\n);\r\n\r\nconst RaatnaFinAPI = () => {\r\n  const externalFetcher = async (\r\n    url: string,\r\n    payload: any\r\n  ): Promise<ExternalResponse> => {\r\n    try {\r\n      let response = await fetch(url, payload);\r\n      let data = await response.json();\r\n      return data;\r\n    } catch (e) {\r\n      return new Error(`Error fetching data-${e.message}`);\r\n    }\r\n  };\r\n  const getPincode = async (\r\n    pincode: string\r\n  ): Promise<{ options: OptionsProps[]; others: any }> => {\r\n    const data = await externalFetcher(\r\n      `https://api.postalpincode.in/pincode/${pincode}`,\r\n      {\r\n        method: \"GET\",\r\n        redirect: \"follow\",\r\n      }\r\n    );\r\n    if (Array.isArray(data) && data.length === 1) {\r\n      let result = data[0];\r\n      if (String(result.Status).toLowerCase() === \"success\") {\r\n        let areaArray = result.PostOffice.map((dtl) => ({\r\n          value: dtl?.Name,\r\n          label: dtl?.Name,\r\n        }));\r\n        areaArray = [{ label: \"Select option\", value: \"00\" }, ...areaArray];\r\n        const otherValues = result.PostOffice.reduce((accumlator, current) => {\r\n          const val = {\r\n            city: current.Block,\r\n            district: current.District,\r\n            state: current.State,\r\n            country: current.Country,\r\n          };\r\n          accumlator[current.Name] = val;\r\n          return accumlator;\r\n        }, {});\r\n        return { options: areaArray, others: otherValues };\r\n      }\r\n    }\r\n    return {\r\n      options: [{ label: \"Error fetching pincode\", value: \"0\" }],\r\n      others: null,\r\n    };\r\n  };\r\n  //Internal fetcher code\r\n  let sessionObj: sessionObjType = {\r\n    loginStatus: false,\r\n    token: {},\r\n  };\r\n  let sessionToken;\r\n  const createSession = async (APIURL: string) => {\r\n    sessionObj.baseURL = new URL(APIURL);\r\n    var formdata = new FormData();\r\n    let existingSession = \"\";\r\n    if (isBroswer()) {\r\n      existingSession = localStorage.getItem(\"currentAccessToken\") ?? \"\";\r\n    }\r\n    formdata.append(\"tokenId\", existingSession);\r\n    var requestOptions = {\r\n      method: \"POST\",\r\n      body: formdata,\r\n      redirect: \"follow\",\r\n    };\r\n    const url = new URL(\"./Login\", sessionObj.baseURL);\r\n    sessionToken = fetch(\r\n      url.href,\r\n      //@ts-ignore\r\n      requestOptions\r\n    );\r\n    sessionToken\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        verifyRequest(result);\r\n      });\r\n    sessionToken.catch((error) => {\r\n      verifyRequest(error);\r\n    });\r\n  };\r\n  const verifyRequest = (data) => {\r\n    if (data[\"access_token\"] && data[\"refresh_token\"]) {\r\n      sessionObj.loginStatus = true;\r\n      sessionObj.token = data;\r\n      if (isBroswer()) {\r\n        localStorage.setItem(\r\n          \"currentAccessToken\",\r\n          sessionObj?.token?.access_token ?? \"\"\r\n        );\r\n      }\r\n    } else {\r\n      sessionObj.loginStatus = false;\r\n    }\r\n  };\r\n  const loginStatus = () => {\r\n    return sessionObj.loginStatus;\r\n  };\r\n\r\n  const internalFetcher = async (\r\n    url: string,\r\n    payload: any\r\n  ): Promise<CommonFetcherResponse> => {\r\n    try {\r\n      await sessionToken;\r\n      await wait(); //wait of 1ms to execute code in next event loop cycle to make sure sessionToken has time to update sessionObj\r\n      if (sessionObj.loginStatus === false) {\r\n        return {\r\n          status: \"failure\",\r\n          data: new Error(\"session expired\"),\r\n        };\r\n      }\r\n      let response = await fetch(new URL(url, sessionObj.baseURL).href, {\r\n        method: \"POST\",\r\n        ...payload,\r\n        headers: new Headers({\r\n          Authorization: `Bearer ${sessionObj?.token?.access_token}`,\r\n        }),\r\n      });\r\n      if (String(response.status) === \"200\") {\r\n        let data = await response.json();\r\n        return {\r\n          status: String(data.status) === \"0\" ? \"success\" : \"failure\",\r\n          data: data,\r\n        };\r\n      } else {\r\n        return {\r\n          status: \"failure\",\r\n          data: \"\",\r\n        };\r\n      }\r\n    } catch (e) {\r\n      return {\r\n        status: \"failure\",\r\n        data: e,\r\n      };\r\n    }\r\n  };\r\n  const getProductType = async (\r\n    _: any,\r\n    formState: any\r\n  ): Promise<OptionsProps[]> => {\r\n    const { status, data } = await internalFetcher(\"./users/get_sub_product\", {\r\n      body: JSON.stringify({\r\n        action: \"get_sub_product\",\r\n        request_data: {\r\n          code: formState?.formCode,\r\n        },\r\n        channel: \"W\",\r\n      }),\r\n    });\r\n    if (status === \"success\" && Array.isArray(data.response_data)) {\r\n      const newArray = data.response_data.map((one) => ({\r\n        value: one?.sub_prod_code,\r\n        label: one?.sub_prod_desc,\r\n      }));\r\n      return newArray;\r\n    }\r\n    return [\r\n      {\r\n        label: \"oops error loading..\",\r\n        value: 1,\r\n      },\r\n    ];\r\n  };\r\n  const getsubProductDtl = async (fieldData) => {\r\n    if (fieldData.value.length !== 0) {\r\n      let codes = await getProductType(null, fieldData.value);\r\n      return {\r\n        subProductType: {\r\n          options: codes,\r\n          value: \"00\",\r\n        },\r\n      };\r\n    } else if (fieldData.value === \"\") {\r\n      return {\r\n        subProductType: {\r\n          options: [],\r\n          value: \"\",\r\n        },\r\n      };\r\n    }\r\n  };\r\n  const getPropertyCity = async (): Promise<OptionsProps[]> => {\r\n    const { status, data } = await internalFetcher(\r\n      \"./users/get_property_city\",\r\n      {\r\n        body: JSON.stringify({\r\n          action: \"get_property_city\",\r\n          request_data: {\r\n            property_city: \"\",\r\n          },\r\n          channel: \"W\",\r\n        }),\r\n      }\r\n    );\r\n    if (status === \"success\" && Array.isArray(data.response_data)) {\r\n      const newArray = data.response_data.map((one) => ({\r\n        value: one?.data_val,\r\n        label: one?.display_val,\r\n      }));\r\n      return newArray;\r\n    }\r\n    return [\r\n      {\r\n        label: \"oops error loading..\",\r\n        value: 1,\r\n      },\r\n    ];\r\n  };\r\n  const getBankList = async (): Promise<OptionsProps[]> => {\r\n    const { status, data } = await internalFetcher(\"./users/getBankList\", {\r\n      body: JSON.stringify({\r\n        action: \"get_bank_list\",\r\n        request_data: {\r\n          get_bank_list: \"\",\r\n        },\r\n        channel: \"W\",\r\n      }),\r\n    });\r\n    if (status === \"success\" && Array.isArray(data.response_data)) {\r\n      const newArray = data.response_data.map((one) => ({\r\n        value: one?.bank_cd,\r\n        label: one?.bank_name,\r\n      }));\r\n      return newArray;\r\n    }\r\n    return [\r\n      {\r\n        label: \"oops error loading..\",\r\n        value: 1,\r\n      },\r\n    ];\r\n  };\r\n  const getMiscVal = (categCode: string) => async (): Promise<\r\n    OptionsProps[]\r\n  > => {\r\n    const { status, data } = await internalFetcher(\"./users/getmiscval\", {\r\n      body: JSON.stringify({\r\n        action: \"get_misc_val\",\r\n        request_data: {\r\n          category_nm: categCode,\r\n        },\r\n        channel: \"W\",\r\n      }),\r\n    });\r\n    if (status === \"success\" && Array.isArray(data.response_data)) {\r\n      const newArray = data.response_data.map((one) => ({\r\n        value: one?.data_val,\r\n        label: one?.display_val,\r\n      }));\r\n      return newArray;\r\n    }\r\n    return [\r\n      {\r\n        label: \"oops error loading..\",\r\n        value: 1,\r\n      },\r\n    ];\r\n  };\r\n  const validatePanNumber = async (currentField) => {\r\n    const { status } = await internalFetcher(\"./users/panvalidator\", {\r\n      body: JSON.stringify({\r\n        action: \"panvalidator\",\r\n        request_data: { doc_number: currentField?.value ?? \"INVALID_PAN\" },\r\n        channel: \"W\",\r\n      }),\r\n    });\r\n    if (status === \"success\") {\r\n      return \"\";\r\n    } else {\r\n      return \"invalid pan number\";\r\n    }\r\n  };\r\n\r\n  const requestOTP = async (refID: number | string) => {\r\n    const { data, status } = await internalFetcher(\"./users/OTPRequest\", {\r\n      body: JSON.stringify({\r\n        action: \"OTPRequest\",\r\n        request_data: {\r\n          refID: refID,\r\n        },\r\n        channel: \"W\",\r\n      }),\r\n    });\r\n    if (status === \"success\") {\r\n      return { status, data: data?.response_data };\r\n    } else {\r\n      return { status, data: data?.error_data };\r\n    }\r\n  };\r\n\r\n  const verifyOTP = async (\r\n    refID: string,\r\n    transactionID: string,\r\n    otp: string\r\n  ) => {\r\n    const { data, status } = await internalFetcher(\"./users/OTPVerify\", {\r\n      body: JSON.stringify({\r\n        action: \"OTPVerify\",\r\n        request_data: {\r\n          refID: refID,\r\n          transaction_id: transactionID,\r\n          otp: otp,\r\n        },\r\n        channel: \"W\",\r\n      }),\r\n    });\r\n    if (status === \"success\") {\r\n      return { status, data: data?.response_data };\r\n    } else {\r\n      return { status, data: data?.error_data };\r\n    }\r\n  };\r\n  const initiateAadharValidation = async (refID) => {\r\n    const { data, status } = await internalFetcher(\r\n      \"./users/initiateaadharreq\",\r\n      {\r\n        body: JSON.stringify({\r\n          action: \"initiateaadharreq\",\r\n          request_data: { refID: refID, sms: \"0\" },\r\n          channel: \"W\",\r\n        }),\r\n      }\r\n    );\r\n    if (status === \"success\") {\r\n      return { status, data: data?.response_data };\r\n    } else {\r\n      return { status, data: data?.error_data };\r\n    }\r\n  };\r\n  const fetchAadharRequestStatus = async (aadharRequestID) => {\r\n    //console.log(refIdForAadhar);\r\n    const { data, status } = await internalFetcher(\r\n      \"./users/fetchaadharstatus\",\r\n      {\r\n        body: JSON.stringify({\r\n          action: \"aadharstatus\",\r\n          request_data: {\r\n            transactionID: aadharRequestID,\r\n            updateStatus: \"\",\r\n          },\r\n          channel: \"W\",\r\n        }),\r\n      }\r\n    );\r\n    if (status === \"success\") {\r\n      return { status, data: data?.response_data };\r\n    } else {\r\n      return { status, data: data?.error_data };\r\n    }\r\n  };\r\n  const submitBecomePartnerData = async (formData?: any) => {\r\n    const { data, status } = await internalFetcher(\"./users/become_partner\", {\r\n      body: JSON.stringify({\r\n        action: \"become_partner\",\r\n        request_data: { ...formData },\r\n        channel: \"W\",\r\n      }),\r\n    });\r\n    if (status === \"success\") {\r\n      return { status, data: data?.response_data };\r\n    } else {\r\n      return { status, data: data?.response_data };\r\n    }\r\n  };\r\n  const getInquiryMetaData = async (state) => {\r\n    const { action, ...others } = state;\r\n\r\n    const { data, status } = await internalFetcher(\"./users/getMetaData\", {\r\n      body: JSON.stringify({\r\n        action: action,\r\n        request_data: others,\r\n      }),\r\n    });\r\n    if (status === \"success\") {\r\n      return data?.response_data ?? {};\r\n    } else {\r\n      return {};\r\n    }\r\n  };\r\n  const sumibtInquiryData = async (\r\n    submitAction?: string,\r\n    formData?: any,\r\n    navigationProps?: any,\r\n    refID?: any\r\n  ) => {\r\n    //rename prodCode to formCode since backend uses prodCode as FormCode\r\n\r\n    const { data, status } = await internalFetcher(\"./users/inquiry\", {\r\n      body: JSON.stringify({\r\n        action: submitAction,\r\n        request_data: { refID: refID, ...formData, ...navigationProps },\r\n        channel: \"W\",\r\n      }),\r\n    });\r\n    if (status === \"success\") {\r\n      return { status, data: data?.response_data };\r\n    } else {\r\n      return { status, data: data?.response_data };\r\n    }\r\n  };\r\n\r\n  const getInquiryFormData = async (inquiryID: string, type: string) => {\r\n    const { data, status } = await internalFetcher(\"./users/inquiry\", {\r\n      body: JSON.stringify({\r\n        action:\r\n          type === \"inquiry\"\r\n            ? \"crm_inquiry_edit_data\"\r\n            : \"crm_questionnaire_edit_data\",\r\n        request_data: {\r\n          refID: inquiryID,\r\n        },\r\n        channel: \"W\",\r\n      }),\r\n    });\r\n    if (status === \"success\") {\r\n      return data?.response_data;\r\n    } else {\r\n      throw data?.error_data;\r\n    }\r\n  };\r\n  const getInquiryFormDisplayData = async (inquiryID: string, type: string) => {\r\n    const { data, status } = await internalFetcher(\"./users/inquiry\", {\r\n      body: JSON.stringify({\r\n        action:\r\n          type === \"inquiry\"\r\n            ? \"crm_inquiry_view_data\"\r\n            : \"crm_questionnaire_view_data\",\r\n        request_data: {\r\n          refID: inquiryID,\r\n        },\r\n      }),\r\n    });\r\n    if (status === \"success\") {\r\n      return data?.response_data;\r\n    } else {\r\n      throw data?.error_data;\r\n    }\r\n  };\r\n  //change this API to fetch against refID\r\n  const getInquiryFormDisplayMetaData = async (\r\n    inquiryID: string,\r\n    type: string\r\n  ) => {\r\n    const { data, status } = await internalFetcher(\"./users/getMetaData\", {\r\n      body: JSON.stringify({\r\n        action:\r\n          type === \"inquiry\"\r\n            ? \"crm_inquiry_view_metaData\"\r\n            : \"crm_questionnaire_view_metaData\",\r\n        request_data: {\r\n          refID: inquiryID,\r\n        },\r\n      }),\r\n    });\r\n    if (status === \"success\") {\r\n      return data?.response_data;\r\n    } else {\r\n      throw data?.error_data;\r\n    }\r\n  };\r\n\r\n  const getInquiryFormEditMetaData = async (\r\n    inquiryID: string,\r\n    type: string\r\n  ) => {\r\n    const { data, status } = await internalFetcher(\"./users/getMetaData\", {\r\n      body: JSON.stringify({\r\n        action:\r\n          type === \"inquiry\"\r\n            ? \"crm_inquiry_edit_metaData\"\r\n            : \"crm_questionnaire_edit_metaData\",\r\n        request_data: {\r\n          refID: inquiryID,\r\n        },\r\n      }),\r\n    });\r\n    if (status === \"success\") {\r\n      return data?.response_data;\r\n    } else {\r\n      throw data?.error_data;\r\n    }\r\n  };\r\n\r\n  const updateInquiryFormData = async (\r\n    InquiryID: string,\r\n    type: string,\r\n    fromData: any\r\n  ) => {\r\n    const { data, status } = await internalFetcher(\"./users/inquiry\", {\r\n      body: JSON.stringify({\r\n        action: type === \"inquiry\" ? \"inquiry_update\" : \"questionnaire_update\",\r\n        request_data: {\r\n          refID: InquiryID,\r\n          ...fromData,\r\n        },\r\n      }),\r\n    });\r\n    console.log(data, status);\r\n    if (status === \"success\") {\r\n      return data?.response_data;\r\n    } else {\r\n      throw data?.error_data;\r\n    }\r\n  };\r\n\r\n  const fetchGridMetaData = async (gridCode) => {\r\n    const { data, status } = await internalFetcher(\"./users/getInquiryData\", {\r\n      body: JSON.stringify({\r\n        action: \"grid_form_data\",\r\n        request_data: {\r\n          grid_code: gridCode,\r\n        },\r\n        channel: \"W\",\r\n      }),\r\n    });\r\n    if (status === \"success\") {\r\n      return { status, data: data?.response_data };\r\n    } else {\r\n      return { status, data: data?.error_data };\r\n    }\r\n  };\r\n  const fetchGridData = async (gridCode, fromNo, toNo, sortBy, filterBy) => {\r\n    const { data, status } = await internalFetcher(\"./users/getInquiryData\", {\r\n      body: JSON.stringify({\r\n        action: \"inquiry_data_pagewise\",\r\n        request_data: {\r\n          grid_code: gridCode,\r\n          from_row: fromNo,\r\n          to_row: toNo,\r\n          orderby_columns: sortBy,\r\n          filter_conditions: filterBy,\r\n        },\r\n      }),\r\n    });\r\n    if (status === \"success\") {\r\n      return { status, data: data?.response_data };\r\n    } else {\r\n      return { status, data: data?.error_data };\r\n    }\r\n  };\r\n  const fetchGridColumnFilterProps = async (gridCode, options) => {\r\n    /*\r\n    options = {accessor:'column_id',result_type:'getGroups|getRange',filter_conditions:[]}\r\n    */\r\n    const { data, status } = await internalFetcher(\"./users/getInquiryData\", {\r\n      body: JSON.stringify({\r\n        action: \"grid_column_options\",\r\n        request_data: {\r\n          grid_code: gridCode,\r\n          ...options,\r\n        },\r\n      }),\r\n    });\r\n    if (status === \"success\") {\r\n      return { status, data: data?.response_data };\r\n    } else {\r\n      return { status, data: data?.error_data };\r\n    }\r\n  };\r\n\r\n  const fetchAadharRequestStatusEventSource = async (\r\n    aadharRequestID\r\n  ): Promise<CommonFetcherResponse> => {\r\n    var urlEndPoint = `https://digix.aiplsolution.in/ratnaafin/users/getaadharstatus?transactionId=${aadharRequestID}`;\r\n    var eventSource = new EventSource(urlEndPoint);\r\n    return new Promise((res) => {\r\n      //@ts-ignore\r\n      eventSource.addEventListener(\"transactionId\", ({ data: eventData }) => {\r\n        eventData = JSON.parse(eventData);\r\n        console.log(eventData);\r\n        let response: CommonFetcherResponse = { status: \"failure\", data: \"\" };\r\n        if (eventData.status === \"0\") {\r\n          response.status = \"success\";\r\n          response.data = eventData?.response_data ?? {};\r\n          res(response);\r\n        } else {\r\n          response.status = \"failure\";\r\n          response.data = eventData?.response_data ?? {};\r\n          res(response);\r\n        }\r\n        eventSource.close();\r\n      });\r\n    });\r\n  };\r\n\r\n  const updateUserPassword = async (\r\n    confirmPassword: string,\r\n    phoneNumber: string\r\n  ) => {\r\n    const { data, status } = await internalFetcher(\"./users/set_password\", {\r\n      body: JSON.stringify({\r\n        action: \"set_password\",\r\n        request_data: {\r\n          mobile: phoneNumber,\r\n          password: confirmPassword,\r\n        },\r\n        channel: \"W\",\r\n      }),\r\n    });\r\n    if (status === \"success\") {\r\n      return { status, data: data?.response_data };\r\n    } else {\r\n      return { status, data: data?.error_data };\r\n    }\r\n  };\r\n\r\n  const verifyPwd = async (password: string, phoneNumber: string) => {\r\n    const { data, status } = await internalFetcher(\"./users/customer_login\", {\r\n      body: JSON.stringify({\r\n        action: \"customer_login\",\r\n        request_data: {\r\n          mobile: phoneNumber,\r\n          password: password,\r\n        },\r\n        channel: \"W\",\r\n      }),\r\n    });\r\n    if (status === \"success\") {\r\n      return { status, data: data?.response_data };\r\n    } else {\r\n      return { status, data: data?.error_data };\r\n    }\r\n  };\r\n\r\n  const getDashboardEmployeeDataList = async () => {\r\n    const { data, status } = await internalFetcher(\"./users/getInquiryData\", {\r\n      body: JSON.stringify({\r\n        action: \"get_inquiry_data\",\r\n        request_data: {\r\n          status: \"P\",\r\n        },\r\n        channel: \"W\",\r\n      }),\r\n    });\r\n\r\n    if (status === \"success\") {\r\n      return { status, data: data?.response_data };\r\n    } else {\r\n      return { status, data: data?.error_data };\r\n    }\r\n  };\r\n  const checkPhoneNumberExists = async (phoneNumber) => {\r\n    const { data, status } = await internalFetcher(\"./users/verify_user\", {\r\n      body: JSON.stringify({\r\n        action: \"verify_user\",\r\n        request_data: { mobile: phoneNumber },\r\n        channel: \"W\",\r\n      }),\r\n    });\r\n\r\n    if (status === \"success\") {\r\n      return { status, data: data?.response_data };\r\n    } else {\r\n      return { status, data: data?.error_data };\r\n    }\r\n  };\r\n  const getInquiryDataToConvertIntoLead = async (refID) => {\r\n    const { data, status } = await internalFetcher(\"./users/getMetaData\", {\r\n      body: JSON.stringify({\r\n        action: \"crm_inquiry_view\",\r\n        request_data: {\r\n          refID: refID,\r\n        },\r\n        channel: \"W\",\r\n      }),\r\n    });\r\n\r\n    if (status === \"success\") {\r\n      return { status, data: data?.response_data };\r\n    } else {\r\n      return { status, data: data?.error_data };\r\n    }\r\n  };\r\n\r\n  const getEmployeeListToAssignLead = async (branchCode) => {\r\n    const { data, status } = await internalFetcher(\"./users/getEmployeeList\", {\r\n      body: JSON.stringify({\r\n        action: \"get_employee_list\",\r\n        request_data: {\r\n          branch_code: branchCode,\r\n        },\r\n      }),\r\n    });\r\n    if (status === \"success\") {\r\n      return data?.response_data;\r\n    } else {\r\n      throw data?.error_data;\r\n    }\r\n  };\r\n\r\n  const inquiryAssignToLead = async (\r\n    refID: any,\r\n    empIDToAssignLead: any,\r\n    inquiryStatus: string\r\n  ) => {\r\n    const { data, status } = await internalFetcher(\"./users/inquiryAssign\", {\r\n      body: JSON.stringify({\r\n        action: \"inquiryAssign\",\r\n        request_data: {\r\n          refID: refID,\r\n          assignID: empIDToAssignLead,\r\n          inquiryStatus: inquiryStatus,\r\n        },\r\n        channel: \"W\",\r\n      }),\r\n    });\r\n    if (status === \"success\") {\r\n      return data?.response_data;\r\n    } else {\r\n      throw data?.error_data;\r\n    }\r\n  };\r\n\r\n  const getHealthCheckScore = async (refID: string) => {\r\n    const { data, status } = await internalFetcher(\"./users/healthcheck  \", {\r\n      body: JSON.stringify({\r\n        action: \"healthcheck\",\r\n        request_data: {\r\n          refID: refID,\r\n        },\r\n        channel: \"W\",\r\n      }),\r\n    });\r\n    if (status === \"success\") {\r\n      return { status, data: data?.response_data };\r\n    } else {\r\n      return { status, data: data?.error_data };\r\n    }\r\n  };\r\n\r\n  return {\r\n    createSession,\r\n    loginStatus,\r\n    getPincode,\r\n    getProductType,\r\n    getsubProductDtl,\r\n    getPropertyCity,\r\n    getBankList,\r\n    getMiscVal,\r\n    //Need to fix this API -to allow pass api result\r\n    validatePanNumber,\r\n    requestOTP,\r\n    verifyOTP,\r\n    initiateAadharValidation,\r\n    fetchAadharRequestStatus,\r\n    submitBecomePartnerData,\r\n\r\n    getInquiryMetaData,\r\n    sumibtInquiryData,\r\n\r\n    getInquiryFormData,\r\n    getInquiryFormDisplayData,\r\n    getInquiryFormDisplayMetaData,\r\n    getInquiryFormEditMetaData,\r\n    updateInquiryFormData,\r\n\r\n    fetchGridMetaData,\r\n    fetchGridColumnFilterProps,\r\n    fetchGridData,\r\n\r\n    //Need to fix these APIS\r\n    fetchAadharRequestStatusEventSource,\r\n    updateUserPassword,\r\n    verifyPwd,\r\n    getDashboardEmployeeDataList,\r\n    checkPhoneNumberExists,\r\n    getInquiryDataToConvertIntoLead,\r\n\r\n    //For inquiry assign to employee\r\n    getEmployeeListToAssignLead,\r\n    inquiryAssignToLead,\r\n\r\n    getHealthCheckScore,\r\n  };\r\n};\r\n\r\nexport const APISDK = RaatnaFinAPI();\r\n\r\nexport const wait = () => {\r\n  return new Promise((res) => {\r\n    setTimeout(() => res(true), 1);\r\n  });\r\n};\r\n","D:\\Ratnaafin\\Ratnafin\\src\\registry\\yup\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\registry\\fns\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\index.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\index.tsx",["1088"],"import { useState, Fragment } from \"react\";\r\nimport { Routes, Route, useParams, useNavigate } from \"react-router-dom\";\r\nimport { AppBar } from \"./appBar\";\r\nimport { MySideBar } from \"./sideBar\";\r\nimport { Drawer } from \"./drawer\";\r\nimport { Content } from \"./content\";\r\nimport Dashboard from \"./pages/dashboard\";\r\nimport { Profile } from \"./pages/profile\";\r\nimport { Inquiry } from \"./pages/inquiry\";\r\nimport Login from \"./pages/login\";\r\nimport DynamicLead from \"./pages/leads\";\r\nimport LeadAction from \"./pages/leadaction\";\r\nimport View from \"./pages/tabView\";\r\nimport { useStyles } from \"./style\";\r\nimport { CC_ODFormWrapper } from \"./pages/CAM/SMELoans/CC_OD/CC_ODFormWrapper\";\r\nimport \"react-perfect-scrollbar/dist/css/styles.css\";\r\n\r\nconst DashbordPages = () => {\r\n  const classes = useStyles();\r\n  const [drawerOpen, setDrawerState] = useState(true);\r\n  const handleDrawerOpen = () => setDrawerState(true);\r\n  const handleDrawerClose = () => setDrawerState(false);\r\n  return (\r\n    <Fragment>\r\n      <div className={classes.root}>\r\n        <AppBar open={drawerOpen} handleDrawerOpen={handleDrawerOpen} />\r\n        <Drawer open={drawerOpen} handleDrawerClose={handleDrawerClose}>\r\n          <MySideBar handleDrawerOpen={handleDrawerOpen} open={drawerOpen} />\r\n        </Drawer>\r\n        <Content>\r\n          <Routes>\r\n            <Route path=\"/\" element={<RedirectComponent />} />\r\n            <Route path=\"/dashboard\" element={<Dashboard />} />\r\n            <Route path=\"/inquiries\" element={<Inquiry />} />\r\n            <Route path=\"/profile\" element={<Profile />} />\r\n            <Route path=\"/cam\" element={<CC_ODFormWrapper />} />\r\n            <Route path=\"/cam\" element={<DynamicLead />} />\r\n            <Route path=\"/pages/:id\" element={<Dummy />} />\r\n            <Route path=\"/leadAction\" element={<LeadAction />} />\r\n            <Route path=\"/view\" element={<View />} />\r\n            <Route path=\"/auth\" element={<Login />} />\r\n          </Routes>\r\n        </Content>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default DashbordPages;\r\n\r\nconst RedirectComponent = () => {\r\n  const navigate = useNavigate();\r\n  setTimeout(() => navigate(\"./dashboard\"), 1);\r\n  return null;\r\n};\r\n\r\nfunction Dummy() {\r\n  let { id } = useParams();\r\n  return (\r\n    <div>\r\n      <h3>ID: {id}</h3>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Ratnaafin\\Ratnafin\\src\\registry\\fns\\pincode.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\registry\\fns\\others.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\CAM\\SMELoans\\CC_OD\\CC_ODFormWrapper.tsx",["1089"],"import { memo, Fragment, FC, useState } from \"react\";\r\nimport FormWrapper, { MetaDataType } from \"components/dyanmicForm\";\r\nimport { InitialValuesType } from \"packages/form\";\r\nimport { CC_ODMetaData } from \"./CC_ODMetaData\";\r\nimport { CAMFormPreviewPage } from \"./formPreview\";\r\n\r\nconst MemoizedFormWrapper = memo(FormWrapper);\r\n\r\ninterface TabFormProps {\r\n  metaData: MetaDataType;\r\n  initialValues?: InitialValuesType;\r\n}\r\n\r\nconst CC_ODForm: FC<TabFormProps> = ({ metaData, initialValues }) => {\r\n  const [showDialog, setShowDialog] = useState(false);\r\n  const [submitProps, setSubmitProps] = useState({});\r\n\r\n  const handleCloseDetails = () => {\r\n    setShowDialog(false);\r\n  };\r\n\r\n  const onSubmitHandler = async (values, submitEnd) => {\r\n    setSubmitProps(() => ({\r\n      values: values,\r\n      submitEnd: submitEnd,\r\n    }));\r\n    setShowDialog(true);\r\n  };\r\n  const result = /*!isMetaDataValid(metaData)*/ !true ? (\r\n    <span>Error loading form</span>\r\n  ) : (\r\n    <Fragment>\r\n      <MemoizedFormWrapper\r\n        metaData={metaData}\r\n        initialValues={initialValues}\r\n        onSubmitHandler={onSubmitHandler}\r\n        hidden={showDialog === true}\r\n      />\r\n      {showDialog ? (\r\n        <CAMFormPreviewPage\r\n          onClose={handleCloseDetails}\r\n          isOpen={showDialog}\r\n          row={submitProps}\r\n        />\r\n      ) : null}\r\n    </Fragment>\r\n  );\r\n\r\n  return result;\r\n};\r\n\r\nexport const CC_ODFormWrapper = () => {\r\n  return <CC_ODForm metaData={CC_ODMetaData} />;\r\n};\r\n","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\footer\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leads\\index.js",[],["1090","1091"],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\drawer\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\index.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leadaction\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\dashboard\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\profile\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\login\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\header\\index.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\appBar\\index.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\sideBar\\index.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\content\\index.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leads\\lead.js",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\CAM\\SMELoans\\CC_OD\\CC_ODMetaData.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\CAM\\SMELoans\\CC_OD\\formPreview.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\footer\\footer.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\sideBar\\metaData.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\sideBar\\icons.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\content\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\dashboard\\dashboard.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\home.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\profile\\changePassword.tsx",["1092","1093"],"import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { useStyles } from \"./style\";\r\n\r\nexport const ChangePassword = () => {\r\n  const classes = useStyles();\r\n  const [OpenDialog, setOpenDialog] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n  return (\r\n    <>\r\n      <DialogTitle id=\"form-dialog-title\">\r\n        Change Password fsdfdsffs\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText>\r\n          Password must be 8-16 characters and include both numbers and letters.\r\n        </DialogContentText>\r\n\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} sm={12} md={12}>\r\n            <TextField\r\n              label=\"Current Password\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              type=\"password\"\r\n              placeholder=\"Current Password\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={12} md={12}>\r\n            <TextField\r\n              label=\"New Password\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              type=\"password\"\r\n              placeholder=\"New Password\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={12} md={12}>\r\n            <TextField\r\n              label=\"Confirm Password\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              type=\"password\"\r\n              placeholder=\"Confirm Password\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </DialogContent>\r\n      <DialogActions className=\"mb-30\">\r\n        <Button\r\n          onClick={handleCloseDialog}\r\n          color=\"primary\"\r\n          className={classes.backBtn}\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          onClick={handleCloseDialog}\r\n          color=\"primary\"\r\n          className={classes.submit}\r\n        >\r\n          Submit\r\n        </Button>\r\n      </DialogActions>\r\n    </>\r\n  );\r\n};\r\n","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\profile\\profile.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\index.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leadaction\\leadaction.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\login\\login.tsx",["1094","1095"],"import React, { useState } from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport { TextField } from \"components/styledComponent/textfield\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { APISDK } from \"registry/fns/sdk\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport logoImg from \"assets/images/logo.svg\";\r\n\r\nimport { useStyles } from \"./style\";\r\n\r\nexport interface FormDialogProps {\r\n  submitProps: any;\r\n}\r\n\r\nexport const Login = () => {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n\r\n  const [phoneNumber, setphoneNumber] = useState(\"\");\r\n  const [otp, setotp] = useState(\"\");\r\n  const [password, setpassword] = useState(\"\");\r\n  const [otpVerifydivShowing, setotpVerifydivShowing] = useState(false);\r\n  const [showPwddiv, setshowPwddiv] = useState(false);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const [id, setid] = useState(\"\");\r\n  const [expiryOtpTime, setexpiryOtpTime] = useState(\"\");\r\n\r\n  const requestOtp = async () => {\r\n    if (phoneNumber !== \"\" && phoneNumber.length === 10) {\r\n      try {\r\n        setLoading(true);\r\n        const result = await APISDK.requestOTP(phoneNumber);\r\n        // console.log(\"result\", result);\r\n        if (result.status === \"success\") {\r\n          setid(result?.data?.id);\r\n          setexpiryOtpTime(result?.data?.sdatetime);\r\n          setotpVerifydivShowing(true);\r\n          setLoading(false);\r\n        } else {\r\n          setError(result?.data?.error_msg);\r\n          setLoading(false);\r\n        }\r\n      } catch (e) {\r\n        setLoading(false);\r\n        console.log(\"in catch\");\r\n      }\r\n    } else {\r\n      setError(\"mobile number should be 10 digits\");\r\n    }\r\n  };\r\n\r\n  const verifyOtp = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const result = await APISDK.verifyOTP(phoneNumber, \"\", otp);\r\n      if (result.status === \"success\") {\r\n        setLoading(false);\r\n        navigate(\"/dashboard\");\r\n      } else {\r\n        setError(result?.data?.error_msg);\r\n        setLoading(false);\r\n      }\r\n    } catch (e) {\r\n      setLoading(false);\r\n      console.log(\"in catch\");\r\n    }\r\n  };\r\n\r\n  // password= \"superacute@1234\";\r\n  const verifyPwd = async () => {\r\n    if (password.length !== 0 || password !== \"\") {\r\n      try {\r\n        setLoading(true);\r\n        const result = await APISDK.verifyPwd(password, phoneNumber);\r\n        // console.log(\"result for password\", result);\r\n        if (result.status === \"success\") {\r\n          setLoading(false);\r\n          navigate(\"/dashboard\");\r\n        } else {\r\n          // console.log(\"in else\", result?.data?.error_msg);\r\n          setError(result?.data?.error_msg);\r\n          setLoading(false);\r\n        }\r\n      } catch (e) {\r\n        setLoading(false);\r\n        console.log(\"in catch\");\r\n      }\r\n    } else {\r\n      setLoading(false);\r\n      console.log(\"Password should not be empty\");\r\n    }\r\n  };\r\n\r\n  const showPassDiv = () => {\r\n    if (error === \"\") {\r\n      setshowPwddiv(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box display=\"flex\" width={1} className={classes.wrapper}>\r\n      <Box\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        width={1 / 2}\r\n        className={classes.loginEmp}\r\n      >\r\n        <img src={logoImg} alt=\"Ratnaafin\" className={classes.logo} />\r\n        <h2>Employee Login</h2>\r\n        <div className=\"text\">\r\n          Login with your registered mobile number to access your Ratnaafin\r\n          account.\r\n        </div>\r\n\r\n        {showPwddiv === true ? (\r\n          <div className={classes.formWrap}>\r\n            <TextField\r\n              label=\"Password\"\r\n              placeholder=\"Password for verification\"\r\n              autoComplete=\"off\"\r\n              type=\"password\"\r\n              name=\"password\"\r\n              value={password}\r\n              onChange={(e) => setpassword(e.target.value)}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              fullWidth\r\n              helperText={error ? error : \"\"}\r\n              error={error ? true : false}\r\n              onBlur={() => setError(\"\")}\r\n            />\r\n\r\n            <Button\r\n              onClick={verifyPwd}\r\n              disabled={password !== \"\" ? false : true}\r\n              endIcon={loading ? <CircularProgress size={20} /> : null}\r\n              className={classes.loginBtn}\r\n            >\r\n              VERIFY & LOGIN\r\n            </Button>\r\n          </div>\r\n        ) : otpVerifydivShowing === true ? (\r\n          <div className={classes.formWrap}>\r\n            <TextField\r\n              label=\"OTP\"\r\n              placeholder=\"OTP for verification\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              fullWidth\r\n              type=\"number\"\r\n              name=\"otp\"\r\n              value={otp}\r\n              onChange={(e) => setotp(e.target.value)}\r\n              autoComplete=\"off\"\r\n              inputProps={{ maxLength: 6 }}\r\n              helperText={error ? error : \"\"}\r\n              error={error ? true : false}\r\n              onBlur={() => setError(\"\")}\r\n            />\r\n            <Button\r\n              disabled={otp.length !== 6 ? true : false}\r\n              onClick={verifyOtp}\r\n              className={classes.loginBtn}\r\n            >\r\n              VERIFY & LOGIN\r\n            </Button>\r\n          </div>\r\n        ) : (\r\n          <div className={classes.formWrap}>\r\n            <TextField\r\n              label=\"Mobile Number\"\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">+91</InputAdornment>\r\n                ),\r\n              }}\r\n              placeholder=\"Enter mobile number\"\r\n              fullWidth\r\n              className=\"mobileNumber\"\r\n              type=\"number\"\r\n              name=\"phoneNumber\"\r\n              autoComplete=\"off\"\r\n              value={phoneNumber}\r\n              onChange={(e) => setphoneNumber(e.target.value)}\r\n              helperText={error ? error : \"\"}\r\n              error={error ? true : false}\r\n              onBlur={() => setError(\"\")}\r\n            />\r\n            <Button\r\n              onClick={requestOtp}\r\n              endIcon={loading ? <CircularProgress size={20} /> : null}\r\n              className={classes.loginBtn}\r\n            >\r\n              Login With OTP\r\n            </Button>\r\n\r\n            <Box display=\"flex\" justifyContent=\"center\" width={1}>\r\n              <div className=\"text\">\r\n                <b>Or</b>\r\n              </div>\r\n            </Box>\r\n\r\n            <Button onClick={showPassDiv} className={classes.loginBtn}>\r\n              Login With Password\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\drawer\\drawer.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\detailsTabPanel.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\header\\header.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\listing.tsx",["1096","1097"],"import { useState, forwardRef } from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DataGrid, { ActionTypes } from \"components/dataTable\";\r\nimport { InquiryDetails } from \"./inquiryDetail\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\n\r\nconst actions: ActionTypes[] = [\r\n  {\r\n    actionName: \"completeView\",\r\n    actionLabel: \"360 View\",\r\n    multiple: false,\r\n    rowDoubleClick: true,\r\n  },\r\n];\r\n\r\nconst Transition = forwardRef(function Transition(props, ref) {\r\n  //@ts-ignore\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport const Inquiry = () => {\r\n  const [action, setAction] = useState<null | any>(null);\r\n  const [disableDialogClose, setDisableDialogClose] = useState(false);\r\n  const [snackBarOpen, setSnackBarOpen] = useState(false);\r\n  const [hasDataChanged, setHasDataChanged] = useState();\r\n\r\n  const handleDialogClose = () => {\r\n    if (!disableDialogClose) {\r\n      setAction(null);\r\n    } else {\r\n      setSnackBarOpen(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <DataGrid gridCode=\"trn/001\" actions={actions} setAction={setAction} />\r\n      <Dialog\r\n        fullScreen\r\n        open={action !== null}\r\n        //@ts-ignore\r\n        TransitionComponent={Transition}\r\n        onClose={handleDialogClose}\r\n      >\r\n        <InquiryDetails\r\n          inquiryID={action?.rows[0].id}\r\n          setDisableDialogClose={setDisableDialogClose}\r\n        />\r\n        <Snackbar\r\n          open={snackBarOpen}\r\n          autoHideDuration={2000}\r\n          onClose={() => setSnackBarOpen(false)}\r\n          message={\"please save any unsaved changes before closing this window\"}\r\n          key={\"bottomcenter\"}\r\n        />\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\inquiryDetail.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\appBar\\appBar.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leads\\displayData.js",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\CAM\\SMELoans\\CC_OD\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\footer\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\inquiryForms\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\notFound\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\login\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\thankyou\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\becomePartner\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\otpVerificationDialog\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\aadharVerification\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\equifax\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\profile\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\login\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\header\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\drawer\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\dashboard\\variants.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\header\\metaData.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\appBar\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\cache.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\navigation\\sideBarNavigation.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\viewEditCompositeComponent.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leadaction\\tabs\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\equifax\\equifax.tsx",["1098","1099","1100"],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\becomePartner\\becomePartnerForm.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\detailsTabs\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\becomePartner\\becomePartnerPage.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\thankyou\\thankyou.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\notFound\\notFound.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\aadharVerification\\aadharVerificationIFrame.tsx",["1101"],"import { Fragment, useEffect, useRef, useReducer } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { APISDK } from \"registry/fns/sdk\";\r\nimport { useNavigationFlow } from \"../utils/navHelpers\";\r\n\r\nconst initialState = {\r\n  currentScreen: \"welcomeView\",\r\n  loading: false,\r\n  error: \"\",\r\n  verificationSuccessful: false,\r\n  aadharTransactionID: \"\",\r\n  aadharAuthenticationURL: \"\",\r\n};\r\n\r\nexport const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"startAadharRequest\":\r\n      return {\r\n        ...state,\r\n        currentScreen: \"welcomeView\",\r\n        error: \"\",\r\n        loading: true,\r\n      };\r\n    case \"endAadharRequestFailure\": {\r\n      return {\r\n        ...state,\r\n        currentScreen: \"welcomeView\",\r\n        loading: false,\r\n        error: action?.payload?.error,\r\n      };\r\n    }\r\n    case \"endAadharRequestSuccess\": {\r\n      return {\r\n        ...state,\r\n        currentScreen: \"addharIFrameView\",\r\n        aadharTransactionID: action?.payload?.transactionId,\r\n        aadharAuthenticationURL: action?.payload?.url,\r\n        loading: false,\r\n        error: \"\",\r\n      };\r\n    }\r\n    case \"aadharValidationSuccess\": {\r\n      return {\r\n        ...state,\r\n        currentScreen: \"resultView\",\r\n        verificationSuccessful: true,\r\n        error: action?.payload?.error,\r\n      };\r\n    }\r\n    case \"aadharValidationFailure\": {\r\n      return {\r\n        ...state,\r\n        currentScreen: \"resultView\",\r\n        verificationSuccessful: false,\r\n        error: action?.payload?.error,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst timeoutDuration = 5 * 60 * 1000;\r\nconst poolingInterval = 10 * 1000;\r\n\r\nexport const AadharVerification = () => {\r\n  //if needed move this variables to REf state (needs investigation)\r\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const [_, refID, nextURL, nextFlowNavigationProps] = useNavigationFlow(\r\n    location,\r\n    \"./thankyou\"\r\n  );\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      clearTimeout(timeoutRef.current as NodeJS.Timeout);\r\n      clearInterval(intervalRef.current as NodeJS.Timeout);\r\n    };\r\n  }, []);\r\n\r\n  const handleStartAadharRequest = async () => {\r\n    dispatch({\r\n      type: \"startAadharRequest\",\r\n    });\r\n    try {\r\n      const result = await APISDK.initiateAadharValidation(refID);\r\n      if (result.status === \"success\") {\r\n        const { transactionId, url } = result.data;\r\n        dispatch({\r\n          type: \"endAadharRequestSuccess\",\r\n          payload: {\r\n            transactionId,\r\n            url,\r\n          },\r\n        });\r\n        startPooling(transactionId);\r\n      } else {\r\n        dispatch({\r\n          type: \"endAadharRequestFailure\",\r\n          payload: {\r\n            error: \"Couldnt Initiate Aadhar Request an internal error occured\",\r\n          },\r\n        });\r\n      }\r\n    } catch (err) {\r\n      dispatch({\r\n        type: \"endAadharRequestFailure\",\r\n        payload: {\r\n          error:\r\n            err?.message?.() ??\r\n            \"Couldnt Initiate Aadhar Request an internal error occured \",\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const startPooling = (aadharTransactionID) => {\r\n    intervalRef.current = setInterval(() => {\r\n      APISDK.fetchAadharRequestStatus(aadharTransactionID).then((resp) => {\r\n        if (resp.status === \"success\") {\r\n          if (resp.data.requestStatus === \"failed\") {\r\n            dispatch({\r\n              type: \"aadharValidationFailure\",\r\n              payload: {\r\n                error: \"Failed to validate aadhar\",\r\n              },\r\n            });\r\n          } else if (resp.data.requestStatus === \"success\") {\r\n            dispatch({\r\n              type: \"aadharValidationSuccess\",\r\n              payload: {\r\n                error:\r\n                  \"Congratulations youve successfully verified your aadhar\",\r\n              },\r\n            });\r\n            clearInterval(intervalRef.current as NodeJS.Timeout);\r\n            clearTimeout(timeoutRef.current as NodeJS.Timeout);\r\n            navigate(nextURL, nextFlowNavigationProps);\r\n          }\r\n        }\r\n      });\r\n    }, poolingInterval);\r\n    timeoutRef.current = setTimeout(() => {\r\n      dispatch({\r\n        type: \"aadharValidationFailure\",\r\n        payload: {\r\n          error: \"Validation timed out\",\r\n        },\r\n      });\r\n      clearInterval(intervalRef.current as NodeJS.Timeout);\r\n    }, timeoutDuration);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      {state.currentScreen === \"welcomeView\" ? (\r\n        <div>\r\n          <span>Do you want to go for aadhar verification ?</span>\r\n          <button\r\n            disabled={state.loading ? true : false}\r\n            onClick={() => {\r\n              handleStartAadharRequest();\r\n            }}\r\n          >\r\n            Yes\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              navigate(nextURL, nextFlowNavigationProps);\r\n            }}\r\n          >\r\n            No\r\n          </button>\r\n          {Boolean(state.error) ? (\r\n            <Alert severity={\"error\"}>{state.error}</Alert>\r\n          ) : null}\r\n        </div>\r\n      ) : state.currentScreen === \"addharIFrameView\" ? (\r\n        <iframe\r\n          title=\"AADHAR\"\r\n          src={state.aadharAuthenticationURL}\r\n          width=\"100%\"\r\n          height=\"500px\"\r\n        />\r\n      ) : state.currentScreen === \"resultView\" ? (\r\n        <Alert severity={state.verificationSuccessful ? \"success\" : \"error\"}>\r\n          {state.error}\r\n        </Alert>\r\n      ) : null}\r\n    </Fragment>\r\n  );\r\n};\r\n","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\inquiryForms\\inquieryForms.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\otpVerificationDialog\\otpVerificationDialog.tsx",["1102"],"import { useEffect, useReducer } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport loaderGif from \"assets/images/loader.gif\";\r\nimport { TextField } from \"components/styledComponent/textfield\";\r\nimport { InputMaskCustom } from \"components/derived/inputMask\";\r\nimport { APISDK } from \"registry/fns/sdk\";\r\nimport { useStyles } from \"./style\";\r\nimport { useNavigationFlow } from \"../utils/navHelpers\";\r\n\r\nconst initialState = {\r\n  currentScreen: \"welcomeOTPVerification\",\r\n  otp: \"\",\r\n  loading: false,\r\n  error: \"\",\r\n  transactionID: \"\",\r\n  verificationSuccessful: false,\r\n  maskedMobileNo: \"\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"updateOTP\":\r\n      return {\r\n        ...state,\r\n        otp: action?.payload,\r\n      };\r\n    case \"startOTPRequest\":\r\n      return {\r\n        ...state,\r\n        error: \"\",\r\n        loading: true,\r\n      };\r\n    case \"endOTPRequestSuccess\":\r\n      return {\r\n        ...state,\r\n        currentScreen: \"welcomeOTPVerification\",\r\n        loading: false,\r\n        maskedMobileNo: action?.payload?.mobileNo,\r\n        transactionID: action?.payload?.transactionId,\r\n        error: \"\",\r\n      };\r\n    case \"endOTPRequestFailure\": {\r\n      return {\r\n        ...state,\r\n        currentScreen: \"welcomeOTPVerification\",\r\n        loading: false,\r\n        error: action?.payload?.error,\r\n      };\r\n    }\r\n    case \"startOTPVerification\":\r\n      return {\r\n        ...state,\r\n        currentScreen: \"welcomeOTPVerification\",\r\n        loading: true,\r\n      };\r\n    case \"endOTPVerificationSuccess\":\r\n      return {\r\n        ...state,\r\n        currentScreen: \"welcomeOTPVerification\",\r\n        loading: false,\r\n        error: \"\",\r\n      };\r\n    case \"endOTPVerificationFailure\":\r\n      return {\r\n        ...state,\r\n        currentScreen: \"welcomeOTPVerification\",\r\n        loading: false,\r\n        error: action?.payload?.error,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const OtpVerificationPage = () => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const classes = useStyles();\r\n  const [\r\n    flowExist,\r\n    refID,\r\n    nextURL,\r\n    nextFlowNavigationProps,\r\n    fallbackURL,\r\n  ] = useNavigationFlow(location, \"/thankyou\");\r\n  const trimmedOTP = state.otp.trim();\r\n  const trimmedOTPLengthValid = trimmedOTP.length === 6;\r\n  const trimmedOTPLengthMsg = \"Otp must be of 6 characters long\";\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: \"startOTPRequest\",\r\n    });\r\n    if (flowExist) {\r\n      APISDK.requestOTP(refID).then((result) => {\r\n        if (result.status === \"success\") {\r\n          const { mobileNo, transactionId } = result.data;\r\n          dispatch({\r\n            type: \"endOTPRequestSuccess\",\r\n            payload: {\r\n              mobileNo,\r\n              transactionId,\r\n            },\r\n          });\r\n        } else {\r\n          dispatch({\r\n            type: \"endOTPRequestFailure\",\r\n            payload: {\r\n              error: \"An unknown error occured, kindly reach raatnafin team\",\r\n            },\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      navigate(fallbackURL);\r\n    }\r\n  }, [dispatch, navigate]);\r\n\r\n  const verifyOTP = () => {\r\n    dispatch({\r\n      type: \"startOTPVerification\",\r\n    });\r\n    if (!Boolean(trimmedOTP)) {\r\n      dispatch({\r\n        type: \"endOTPVerificationFailure\",\r\n        payload: {\r\n          error: \"This is a required Field\",\r\n        },\r\n      });\r\n      return;\r\n    }\r\n    if (!trimmedOTPLengthValid) {\r\n      dispatch({\r\n        type: \"endOTPVerificationFailure\",\r\n        payload: {\r\n          error: trimmedOTPLengthMsg,\r\n        },\r\n      });\r\n      return;\r\n    }\r\n    dispatch({\r\n      type: \"startOTPVerification\",\r\n    });\r\n    APISDK.verifyOTP(refID, state.transactionID, trimmedOTP).then((result) => {\r\n      if (result.status === \"success\") {\r\n        dispatch({\r\n          type: \"endOTPVerificationSuccess\",\r\n          payload: {\r\n            error: \"\",\r\n          },\r\n        });\r\n        navigate(nextURL, nextFlowNavigationProps);\r\n      } else {\r\n        const { message } = result.data;\r\n        dispatch({\r\n          type: \"endOTPVerificationFailure\",\r\n          payload: {\r\n            error: message ?? \"An Unknown error occured\",\r\n          },\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  let result = (\r\n    <>\r\n      <Typography>Verify OTP </Typography>\r\n      {state.currentScreen === \"welcomeOTPVerification\" ||\r\n      state.maskedMobileNo.trim() !== \"\" ? (\r\n        <>\r\n          <Typography>\r\n            OTP has been sent to your mobile number ending with:\r\n            {state.maskedMobileNo}\r\n          </Typography>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            type=\"email\"\r\n            name=\"otp\"\r\n            fullWidth\r\n            value={state.otp}\r\n            error={Boolean(state.error)}\r\n            helperText={Boolean(state.error) ? state.error : null}\r\n            onChange={(e) =>\r\n              dispatch({\r\n                type: \"updateOTP\",\r\n                payload: e.target.value,\r\n              })\r\n            }\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            InputProps={{\r\n              inputComponent: InputMaskCustom,\r\n              inputProps: {\r\n                MaskProps: {\r\n                  mask: \"0 0 0 0 0 0\",\r\n                },\r\n              },\r\n            }}\r\n          />\r\n          <Button\r\n            onClick={verifyOTP}\r\n            color=\"primary\"\r\n            endIcon={state.loading ? <CircularProgress size={20} /> : null}\r\n          >\r\n            Verify\r\n          </Button>\r\n        </>\r\n      ) : state.loading === false && Boolean(state.error) ? (\r\n        <Typography>{state.error}</Typography>\r\n      ) : (\r\n        <img\r\n          src={loaderGif}\r\n          style={{ justifyContent: \"center\", margin: \"auto\" }}\r\n          alt=\"loader\"\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.paper}>\r\n      <div className={classes.paper2}>{result}</div>\r\n    </div>\r\n  );\r\n};\r\n","D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\login\\login.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\convertInquirytolead\\index.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\customerDetails\\index.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\formView.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\formEdit.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\tooltip\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\navigation\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\becomePartner\\metaData.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\notFound\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\thankyou\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leadaction\\tabs\\tabs.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\inquiryForms\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\becomePartner\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\login\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\utils\\navHelpers.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\otpVerificationDialog\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\inquiryForms\\confirmationBox.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\equifax\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\detailsTabs\\tabs.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\convertInquirytolead\\inquiryToLead.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\customerDetails\\customerDetail.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\tooltip\\tooltip.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\navigation\\types.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\navigation\\bootstrapNavigation.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leadaction\\tabs\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leadaction\\tabs\\tabCustomer.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leadaction\\tabs\\tabInformation.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\detailsTabs\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\convertInquirytolead\\style.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\inquiry\\customerDetails\\style.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\utils\\transformMetaDataForEdit.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\detailsTabs\\tabCustomer.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\detailsTabs\\tabInformation.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\navigation\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\textfield\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\derived\\inputMask\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\leadaction\\tabs\\editor.tsx",["1103"],"import { Editor } from \"@tinymce/tinymce-react\";\r\n\r\nexport const TextEditor = () => {\r\n  const handleEditorChange = (content, editor) => {};\r\n\r\n  return (\r\n    <Editor\r\n      initialValue=\"<p>This is the initial content of the editor</p>\"\r\n      apiKey=\"pc8b933js2e6hly9nkp1ha2nuyak0anqgq47c31y2kontd64\"\r\n      init={{\r\n        height: 300,\r\n        menubar: false,\r\n        plugins: [\r\n          \"advlist autolink lists link image charmap print preview anchor\",\r\n          \"searchreplace visualblocks code fullscreen\",\r\n          \"insertdatetime media table paste code help wordcount\",\r\n        ],\r\n        toolbar:\r\n          \"undo redo | formatselect | bold italic backcolor | \\\r\n             alignleft aligncenter alignright alignjustify | \\\r\n             bullist numlist outdent indent | removeformat | insertdatetime | table | help\",\r\n      }}\r\n      onEditorChange={handleEditorChange}\r\n    />\r\n  );\r\n};\r\n","D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\leadForm.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\customerForm.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\customerInformation.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\leadInformation.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\textfield\\textField.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\derived\\inputMask\\maskInputField.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\tab\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\tabs\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\tabView\\tabPanelContent\\detailsTabs\\editor.tsx",["1104"],"D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\tabs\\tabs.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\tab\\tab.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\textField\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\textField\\textField.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\packages\\form\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\packages\\form\\src\\util.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\packages\\form\\src\\fieldArray.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\packages\\form\\src\\atoms.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\packages\\form\\src\\field.ts",["1105"],"import { useContext, useRef, useEffect, useCallback } from \"react\";\r\nimport {\r\n  useRecoilState,\r\n  useSetRecoilState,\r\n  useRecoilValue,\r\n  useRecoilCallback,\r\n} from \"recoil\";\r\nimport {\r\n  formAtom,\r\n  formFieldAtom,\r\n  formFieldRegistryAtom,\r\n  formFieldRegisterSelector,\r\n  formFieldUnregisterSelector,\r\n  subscribeToFormFieldsSelector,\r\n  formFieldExcludeAddSelector,\r\n  formFieldExcludeRemoveSelector,\r\n  formFieldsErrorWatcherAddSelector,\r\n  formFieldsErrorWatcherRemoveSelector,\r\n} from \"./atoms\";\r\nimport {\r\n  FormFieldAtomType,\r\n  FormFieldRegistryAtomType,\r\n  UseFieldHookProps,\r\n  FormFieldRegisterSelectorAttributes,\r\n  InitialValuesType,\r\n  PostValidationSetCrossFieldValuesFnType,\r\n  ValidateFnType,\r\n  SchemaValidateFnType,\r\n  DependentValuesType,\r\n} from \"./types\";\r\nimport { FormContext } from \"./context\";\r\nimport { getIn, yupReachAndValidate } from \"./util\";\r\n\r\nexport const useField = ({\r\n  fieldKey,\r\n  name,\r\n  dependentFields,\r\n  validate,\r\n  validationRun,\r\n  shouldExclude,\r\n  isReadOnly,\r\n  postValidationSetCrossFieldValues,\r\n  runPostValidationHookAlways,\r\n  runValidationOnDependentFieldsChange,\r\n}: UseFieldHookProps) => {\r\n  //formContext provides formName for scoping of fields, and initialValue for the field\r\n  const formContext = useContext(FormContext);\r\n  //formState provides will be used to determine if form is submitting\r\n  const formState = useRecoilValue(formAtom(formContext.formName));\r\n  //fieldKeyRef used to inititalize fieldKey, if fieldKey is not passed\r\n  //fieldName will be used to determine fieldKey, fieldKey will be used to\r\n  //access atom from recoil storing field state\r\n  const fieldKeyRef = useRef(\r\n    Boolean(fieldKey)\r\n      ? `${formContext.formName}/${fieldKey}`\r\n      : `${formContext.formName}/${name}`\r\n  );\r\n\r\n  //fieldData atom stores current field state\r\n  const [fieldData, setFieldData] = useRecoilState<FormFieldAtomType>(\r\n    formFieldAtom(fieldKeyRef.current)\r\n  );\r\n\r\n  //This effect will update fieldName, in case of arrayField, when fields array index postion\r\n  //updates. ie. arrayFieldName[current-index].fieldName - here currentIndex represents\r\n  //fields current postion in the arrayField\r\n  useEffect(() => {\r\n    if (name.indexOf(`${formContext.formName}/`) === 0) {\r\n      setFieldData((currVal) => ({\r\n        ...currVal,\r\n        name: name,\r\n      }));\r\n    }\r\n  }, [name, setFieldData, formContext.formName]);\r\n\r\n  //fieldDataRef will store current reference of fieldState and will provide latest value to\r\n  //onChange and onBlur handlers when the memozied version of handlers are passed as props\r\n  //shaving off rerenders.\r\n  const fieldDataRef = useRef<FormFieldAtomType>(fieldData);\r\n  fieldDataRef.current = fieldData;\r\n\r\n  //registerField function registers the currentField to the fields registry if not registered,\r\n  //and keeping track of all the active fields in the form\r\n  const registerField = useSetRecoilState(\r\n    formFieldRegisterSelector(formContext.formName)\r\n  );\r\n  //unregisterField function unregistered the currentField from the fields registry\r\n  const unregisterField = useSetRecoilState(\r\n    formFieldUnregisterSelector(formContext.formName)\r\n  );\r\n\r\n  //This effect will register and unregister fields when they mount and unmount\r\n  //set initial value of the field, if initial value is provided.\r\n  //If an option is set not resetField on unmount unregister will not be called.\r\n  useEffect(() => {\r\n    const currentfield = fieldKeyRef.current;\r\n    //Since our keys are prepended with formName, remove the formName and get the filedValue from\r\n    //initialValues object\r\n    let defaultValue: any = null;\r\n    const value =\r\n      typeof formContext.initialValues === \"object\"\r\n        ? getIn(\r\n            formContext.initialValues,\r\n            currentfield.replace(`${formContext.formName}/`, \"\"),\r\n            null\r\n          )\r\n        : null;\r\n    if (Boolean(value)) {\r\n      defaultValue = { value: value };\r\n    }\r\n\r\n    const registrationValue: FormFieldRegisterSelectorAttributes = {\r\n      defaultValue: defaultValue,\r\n      fieldName: currentfield,\r\n    };\r\n    registerField(registrationValue);\r\n    //we need to run handleBlur for postValidation hook - this a hack to fix an issue\r\n    if (\r\n      typeof postValidationSetCrossFieldValues === \"function\" &&\r\n      Boolean(defaultValue)\r\n    ) {\r\n      setTimeout(handleBlur, 1);\r\n    }\r\n    //end of hack\r\n\r\n    if (Boolean(formContext.resetFieldOnUnmount) === true) {\r\n      return () => {\r\n        unregisterField(currentfield);\r\n      };\r\n    }\r\n  }, [setFieldData, registerField, unregisterField, formContext]);\r\n\r\n  //This hook with register validation method on field instance\r\n\r\n  const isValidationFnRef = useRef(\r\n    typeof validate === \"function\" ? true : false\r\n  );\r\n\r\n  //eslint is disabled since validate frequently changes and is not in our control\r\n  //always enable and check  if we are not excluding any other field\r\n  /* eslint-disable react-hooks/exhaustive-deps */\r\n  useEffect(() => {\r\n    const extractedFieldName = fieldData.name.replace(\r\n      `${formContext.formName}/`,\r\n      \"\"\r\n    );\r\n    const wrappedValidation = wrapValidationMethod(\r\n      yupReachAndValidate(formContext.validationSchema, extractedFieldName),\r\n      validate,\r\n      postValidationSetCrossFieldValues,\r\n      runPostValidationHookAlways\r\n    );\r\n    if (typeof wrappedValidation === \"function\") {\r\n      isValidationFnRef.current = true;\r\n      setFieldData((currVal) => ({\r\n        ...currVal,\r\n        validate: wrappedValidation,\r\n        dependentFields: dependentFields,\r\n      }));\r\n    } else {\r\n      setFieldData((currVal) => ({\r\n        ...currVal,\r\n        dependentFields: dependentFields,\r\n      }));\r\n    }\r\n  }, [\r\n    setFieldData,\r\n    formContext.formName,\r\n    formContext.validationSchema,\r\n    fieldData.name,\r\n  ]);\r\n\r\n  //Subscribe to cross fields values, provide an array of dependent field names,\r\n  //this field will be rerendered when any of the provided dependent field's value updates.\r\n\r\n  const addRemoveExcludedFields = useRecoilCallback(\r\n    ({ set }) => ({ fieldName, flag }) => {\r\n      if (flag === \"add\") {\r\n        set(formFieldExcludeAddSelector(formContext.formName), fieldName);\r\n      } else if (flag === \"remove\") {\r\n        set(formFieldExcludeRemoveSelector(formContext.formName), fieldName);\r\n      }\r\n    },\r\n    [formContext.formName]\r\n  );\r\n  const addRemoveFieldsFromErrorWatcher = useRecoilCallback(\r\n    ({ set }) => ({ fieldName, flag }) => {\r\n      if (flag === \"add\") {\r\n        set(formFieldsErrorWatcherAddSelector(formContext.formName), fieldName);\r\n      } else if (flag === \"remove\") {\r\n        set(\r\n          formFieldsErrorWatcherRemoveSelector(formContext.formName),\r\n          fieldName\r\n        );\r\n      }\r\n    }\r\n  );\r\n\r\n  const dependentFieldsState = useRecoilValue(\r\n    subscribeToFormFieldsSelector({\r\n      formName: formContext.formName,\r\n      fields: dependentFields,\r\n    })\r\n  );\r\n  const dependentFieldsStateRef = useRef(dependentFieldsState);\r\n  dependentFieldsStateRef.current = dependentFieldsState;\r\n  useEffect(() => {\r\n    if (runValidationOnDependentFieldsChange === true) {\r\n      handleValidation(fieldData, dependentFieldsState, true);\r\n    }\r\n  }, [dependentFieldsState]);\r\n\r\n  // this determine if the field should be excluded\r\n  const lastShouldExcludePromise = useRef<Promise<any> | null>(null);\r\n  const lastIsReadOnlyPromise = useRef<Promise<any> | null>(null);\r\n  useEffect(() => {\r\n    if (typeof shouldExclude === \"function\") {\r\n      const currentShouldExcludePromise = Promise.resolve(\r\n        shouldExclude(fieldData, dependentFieldsState, formContext.formState)\r\n      );\r\n      lastShouldExcludePromise.current = currentShouldExcludePromise;\r\n      currentShouldExcludePromise.then((result) => {\r\n        if (currentShouldExcludePromise === lastShouldExcludePromise.current) {\r\n          if (result === true && fieldData.excluded === false) {\r\n            setFieldData((old) => ({\r\n              ...old,\r\n              excluded: true,\r\n            }));\r\n            addRemoveExcludedFields({ fieldName: fieldData.name, flag: \"add\" });\r\n          } else if (result === false && fieldData.excluded === true) {\r\n            setFieldData((old) => ({\r\n              ...old,\r\n              excluded: false,\r\n            }));\r\n            addRemoveExcludedFields({\r\n              fieldName: fieldData.name,\r\n              flag: \"remove\",\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n    if (typeof isReadOnly === \"function\") {\r\n      const currentIsReadOnlyPromise = Promise.resolve(\r\n        isReadOnly(fieldData, dependentFieldsState, formContext.formState)\r\n      );\r\n      lastIsReadOnlyPromise.current = currentIsReadOnlyPromise;\r\n      currentIsReadOnlyPromise.then((result) => {\r\n        if (currentIsReadOnlyPromise === lastIsReadOnlyPromise.current) {\r\n          if (result === true && fieldData.readOnly === false) {\r\n            setFieldData((old) => ({\r\n              ...old,\r\n              readOnly: true,\r\n            }));\r\n          } else if (result === false && fieldData.readOnly === true) {\r\n            setFieldData((old) => ({\r\n              ...old,\r\n              readOnly: true,\r\n            }));\r\n          }\r\n        }\r\n      });\r\n    }\r\n    if (Boolean(fieldData.error)) {\r\n      addRemoveFieldsFromErrorWatcher({\r\n        fieldName: fieldData.name,\r\n        flag: \"add\",\r\n      });\r\n    } else {\r\n      addRemoveFieldsFromErrorWatcher({\r\n        fieldName: fieldData.name,\r\n        flag: \"remove\",\r\n      });\r\n    }\r\n  });\r\n  const passCrossFieldMessage = useRecoilCallback(\r\n    ({ snapshot, set }) => (fieldsObj: InitialValuesType) => {\r\n      const fieldsLoadable = snapshot.getLoadable(\r\n        formFieldRegistryAtom(formContext.formName)\r\n      );\r\n      let fields: FormFieldRegistryAtomType = [];\r\n      if (fieldsLoadable.state === \"hasValue\") {\r\n        fields = fieldsLoadable.contents;\r\n      }\r\n      for (const field of Object.entries(fieldsObj)) {\r\n        if (fields.indexOf(`${formContext.formName}/${field[0]}`) >= 0) {\r\n          set(formFieldAtom(`${formContext.formName}/${field[0]}`), (old) => ({\r\n            ...old,\r\n            incomingMessage: field[1],\r\n          }));\r\n        }\r\n      }\r\n    },\r\n    [formContext.formName]\r\n  );\r\n\r\n  /**\r\n   * Start of field Validation Logic\r\n   * It will always run the validation against the latest value and if promise provides cancelFn\r\n   * it will call cancel function and cancel the query\r\n   */\r\n  const whenToRunValidation = useRef(\r\n    Boolean(validationRun)\r\n      ? validationRun\r\n      : Boolean(formContext.validationRun)\r\n      ? formContext.validationRun\r\n      : \"all\"\r\n  );\r\n\r\n  const lastValidationPromise = useRef<Promise<any> | null>(null);\r\n  const lastValidationValue = useRef<any | null>(null);\r\n\r\n  const handleValidation = useCallback(\r\n    (\r\n      data: FormFieldAtomType,\r\n      dependentFieldsState: DependentValuesType,\r\n      alwaysRun?: boolean,\r\n      touchAndValidate?: boolean\r\n    ) => {\r\n      if (typeof fieldDataRef.current.validate !== \"function\") {\r\n        return;\r\n      }\r\n      if (lastValidationValue.current === data.value && !!alwaysRun === false) {\r\n        return;\r\n      }\r\n      setFieldData((old) => ({\r\n        ...old,\r\n        validationRunning: true,\r\n      }));\r\n      const currentPromise = Promise.resolve(\r\n        fieldDataRef.current.validate(\r\n          data,\r\n          dependentFieldsState,\r\n          formContext.formState\r\n        )\r\n      );\r\n      //@ts-ignore\r\n      lastValidationValue.current = data.value;\r\n      lastValidationPromise.current = currentPromise;\r\n      currentPromise\r\n        .then((result) => {\r\n          if (lastValidationPromise.current === currentPromise) {\r\n            const { error, crossFieldMessages, apiResult } = result;\r\n            let finalResult;\r\n            if (\r\n              typeof error === \"string\" ||\r\n              error === undefined ||\r\n              error === null\r\n            ) {\r\n              finalResult = error;\r\n            } else {\r\n              finalResult = \"unkown error check console\";\r\n              console.log(\"unknown error type\", error);\r\n            }\r\n            if (!Boolean(touchAndValidate)) {\r\n              setFieldData((old) => {\r\n                return {\r\n                  ...old,\r\n                  validationRunning: false,\r\n                  error: finalResult,\r\n                  validationAPIResult: apiResult,\r\n                };\r\n              });\r\n            } else {\r\n              setFieldData((old) => {\r\n                return {\r\n                  ...old,\r\n                  validationRunning: false,\r\n                  touched: true,\r\n                  error: finalResult,\r\n                  validationAPIResult: apiResult,\r\n                };\r\n              });\r\n            }\r\n            if (typeof crossFieldMessages === \"object\") {\r\n              passCrossFieldMessage(crossFieldMessages);\r\n            }\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          if (lastValidationPromise.current === currentPromise) {\r\n            let finalResult;\r\n            if (err instanceof Error) {\r\n              finalResult = err.message;\r\n            } else {\r\n              finalResult = \"unkown error type check console\";\r\n              console.log(\"unknown error type\", err);\r\n            }\r\n            if (!Boolean(touchAndValidate)) {\r\n              setFieldData((old) => {\r\n                return {\r\n                  ...old,\r\n                  validationRunning: false,\r\n                  error: finalResult,\r\n                  validationAPIResult: err,\r\n                };\r\n              });\r\n            } else {\r\n              setFieldData((old) => {\r\n                return {\r\n                  ...old,\r\n                  validationRunning: false,\r\n                  touched: true,\r\n                  error: finalResult,\r\n                  validationAPIResult: err,\r\n                };\r\n              });\r\n            }\r\n          }\r\n        });\r\n    },\r\n    [setFieldData, passCrossFieldMessage]\r\n  );\r\n  /**\r\n   * End of validation Logic\r\n   */\r\n  // //Run validation when dependent field changes\r\n  // useEffect(()=> {\r\n\r\n  // },[dependentFieldsState])\r\n\r\n  const setTouched = useCallback(() => {\r\n    setFieldData((currVal) => {\r\n      if (currVal.touched) {\r\n        return currVal;\r\n      } else {\r\n        return {\r\n          ...currVal,\r\n          touched: true,\r\n        };\r\n      }\r\n    });\r\n  }, [setFieldData]);\r\n  const setValue = useCallback(\r\n    (val: any, displayValue: any, alwaysRun?: boolean) => {\r\n      if (!!alwaysRun === false) {\r\n        setFieldData((currVal) => {\r\n          if (currVal.value === val) {\r\n            return currVal;\r\n          } else {\r\n            return {\r\n              ...currVal,\r\n              value: val,\r\n              displayValue: displayValue ?? val,\r\n            };\r\n          }\r\n        });\r\n      } else {\r\n        setFieldData((currVal) => {\r\n          return {\r\n            ...currVal,\r\n            value: val,\r\n            displayValue: displayValue ?? val,\r\n          };\r\n        });\r\n      }\r\n    },\r\n    [setFieldData]\r\n  );\r\n  const runValidation = useCallback(\r\n    (mergeObj: any, alwaysRun?: boolean, touchAndValidate?: boolean) => {\r\n      if (mergeObj) {\r\n        handleValidation(\r\n          { ...fieldDataRef.current, ...mergeObj },\r\n          dependentFieldsStateRef.current,\r\n          alwaysRun,\r\n          touchAndValidate\r\n        );\r\n      } else {\r\n        handleValidation(\r\n          fieldDataRef.current,\r\n          dependentFieldsStateRef.current,\r\n          alwaysRun,\r\n          touchAndValidate\r\n        );\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  //handleChange will be responsible for setting fieldValue when will be passed as a props to the\r\n  //inputs, it can take event, date, number, string, boolean,\r\n  //It will run validation if validationRun == 'onChange'\r\n  const handleChange = useCallback(\r\n    (\r\n      eventOrTextValue:\r\n        | React.ChangeEvent<any>\r\n        | Date\r\n        | string\r\n        | number\r\n        | boolean\r\n        | any[],\r\n      displayValue?: Date | string | number | boolean | any[]\r\n    ) => {\r\n      if (fieldDataRef.current !== null) {\r\n        eventOrTextValue = eventOrTextValue ?? \"\";\r\n        let val = eventOrTextValue;\r\n        let displayVal = displayValue;\r\n        if (\r\n          !(\r\n            eventOrTextValue instanceof Date ||\r\n            typeof eventOrTextValue === \"string\" ||\r\n            typeof eventOrTextValue === \"number\" ||\r\n            typeof eventOrTextValue === \"boolean\" ||\r\n            Array.isArray(eventOrTextValue)\r\n          )\r\n        ) {\r\n          //Since React 17 we dont need this but commeting it incase any issues are faced\r\n          // if (\r\n          //   (eventOrTextValue as React.ChangeEvent<any>) &&\r\n          //   (eventOrTextValue as React.ChangeEvent<any>).persist\r\n          // ) {\r\n          //   (eventOrTextValue as React.ChangeEvent<any>).persist();\r\n          // }\r\n          const {\r\n            type,\r\n            value,\r\n            checked,\r\n            options,\r\n            multiple,\r\n          } = eventOrTextValue.target;\r\n          let parsed;\r\n          val = /number|range/.test(type)\r\n            ? ((parsed = parseFloat(value)), isNaN(parsed) ? \"\" : parsed)\r\n            : /checkbox/.test(type)\r\n            ? getValueForCheckbox(fieldDataRef.current.value, checked, value)\r\n            : !!multiple\r\n            ? getSelectedValues(options)\r\n            : value;\r\n          displayVal = /checkbox/.test(type)\r\n            ? getValueForCheckbox(\r\n                fieldDataRef.current.displayValue ?? \"00\",\r\n                checked,\r\n                displayValue\r\n              )\r\n            : displayValue;\r\n        }\r\n\r\n        setValue(val, displayVal);\r\n        if (\r\n          isValidationFnRef.current &&\r\n          (whenToRunValidation.current === \"onChange\" ||\r\n            whenToRunValidation.current === \"all\")\r\n        ) {\r\n          runValidation({ value: val });\r\n        }\r\n      }\r\n    },\r\n    [setValue, runValidation, formContext.validationRun]\r\n  );\r\n\r\n  //handleBlur will set touch property in field state to true for every field touched by user\r\n  //It will run validation if validationRun == 'onBlur'\r\n  const handleBlur = useCallback(async () => {\r\n    if (fieldDataRef.current !== null) {\r\n      setTouched();\r\n      if (\r\n        isValidationFnRef.current &&\r\n        (whenToRunValidation.current === \"onBlur\" ||\r\n          whenToRunValidation.current === \"all\")\r\n      ) {\r\n        runValidation({ touched: true });\r\n      }\r\n    }\r\n  }, [setTouched, runValidation, formContext.validationRun]);\r\n\r\n  return {\r\n    ...fieldData,\r\n    formState: formContext.formState,\r\n    whenToRunValidation: whenToRunValidation.current,\r\n    isSubmitting: formState.isSubmitting,\r\n    handleChange,\r\n    handleBlur,\r\n    setTouched,\r\n    setValue,\r\n    runValidation,\r\n    dependentValues: dependentFieldsState,\r\n  };\r\n};\r\n\r\n//copied from formik\r\n\r\n// Checkbox helper that will provide an array if multiple checkboxes are present under same name\r\nfunction getValueForCheckbox(\r\n  currentValue: string | any[],\r\n  checked: boolean,\r\n  valueProp: any\r\n) {\r\n  // If the current value was a boolean, return a boolean\r\n  if (typeof currentValue === \"boolean\") {\r\n    return Boolean(checked);\r\n  }\r\n\r\n  // If the currentValue was not a boolean we want to return an array\r\n  let currentArrayOfValues: any[] = [];\r\n  let isValueInArray = false;\r\n  let index = -1;\r\n\r\n  if (!Array.isArray(currentValue)) {\r\n    // eslint-disable-next-line eqeqeq\r\n    if (!valueProp || valueProp == \"true\" || valueProp == \"false\") {\r\n      return Boolean(checked);\r\n    }\r\n  } else {\r\n    // If the current value is already an array, use it\r\n    currentArrayOfValues = currentValue;\r\n    index = currentValue.indexOf(valueProp);\r\n    isValueInArray = index >= 0;\r\n  }\r\n\r\n  // If the checkbox was checked and the value is not already present in the aray we want to add the new value to the array of values\r\n  if (checked && valueProp && !isValueInArray) {\r\n    return currentArrayOfValues.concat(valueProp);\r\n  }\r\n\r\n  // If the checkbox was unchecked and the value is not in the array, simply return the already existing array of values\r\n  if (!isValueInArray) {\r\n    return currentArrayOfValues;\r\n  }\r\n\r\n  // If the checkbox was unchecked and the value is in the array, remove the value and return the array\r\n  return currentArrayOfValues\r\n    .slice(0, index)\r\n    .concat(currentArrayOfValues.slice(index + 1));\r\n}\r\n\r\nfunction getSelectedValues(options: any[]) {\r\n  return Array.from(options)\r\n    .filter((el) => el.selected)\r\n    .map((el) => el.value);\r\n}\r\n\r\n//Need to rethink this API - its too messy\r\nfunction wrapValidationMethod(\r\n  schemaValidation?: typeof SchemaValidateFnType,\r\n  validationFn?: typeof ValidateFnType,\r\n  postValidationSetCrossFieldValuesFn?: typeof PostValidationSetCrossFieldValuesFnType,\r\n  runPostValidationHookAlways?: boolean\r\n) {\r\n  if (\r\n    typeof schemaValidation !== \"function\" &&\r\n    typeof validationFn !== \"function\" &&\r\n    typeof postValidationSetCrossFieldValuesFn !== \"function\"\r\n  ) {\r\n    return undefined;\r\n  }\r\n  const shouldRunAlways = Boolean(runPostValidationHookAlways);\r\n  if (!shouldRunAlways) {\r\n    const wrapperFunction = async (\r\n      field: any,\r\n      dependentFieldsState: DependentValuesType,\r\n      formState: any\r\n    ) => {\r\n      let errorMsg: any = null;\r\n      let apiResult: any = null;\r\n      let errorMsgObj: any = null;\r\n      let crossFieldMessages: InitialValuesType | null | undefined;\r\n      if (typeof schemaValidation === \"function\") {\r\n        errorMsg = await schemaValidation(field, formState);\r\n      }\r\n      if (Boolean(errorMsg)) {\r\n        return { error: errorMsg, crossFieldMessages: {}, apiResult };\r\n      }\r\n      if (typeof validationFn === \"function\") {\r\n        errorMsgObj = await validationFn(\r\n          field,\r\n          dependentFieldsState,\r\n          formState\r\n        );\r\n        if (typeof errorMsgObj === \"object\") {\r\n          errorMsg = errorMsgObj.error;\r\n          apiResult = errorMsg.apiResult;\r\n        } else {\r\n          errorMsg = errorMsgObj;\r\n        }\r\n      }\r\n      if (Boolean(errorMsg)) {\r\n        return { error: errorMsg, crossFieldMessages: {}, apiResult };\r\n      }\r\n      if (typeof postValidationSetCrossFieldValuesFn === \"function\") {\r\n        crossFieldMessages = await postValidationSetCrossFieldValuesFn(\r\n          field,\r\n          formState\r\n        );\r\n        if (\r\n          crossFieldMessages === null ||\r\n          crossFieldMessages === undefined ||\r\n          typeof crossFieldMessages !== \"object\"\r\n        ) {\r\n          crossFieldMessages = {};\r\n        }\r\n      }\r\n      return { error: errorMsg, crossFieldMessages, apiResult };\r\n    };\r\n    return wrapperFunction;\r\n  } else {\r\n    const wrapperFunctionAlways = async (\r\n      field: any,\r\n      dependentFieldsState: DependentValuesType,\r\n      formState: any\r\n    ) => {\r\n      let errorMsg: any = null;\r\n      let apiResult: any = null;\r\n      let errorMsgObj: any = null;\r\n      let crossFieldMessages: InitialValuesType | null | undefined;\r\n      if (typeof postValidationSetCrossFieldValuesFn === \"function\") {\r\n        crossFieldMessages = await postValidationSetCrossFieldValuesFn(\r\n          field,\r\n          formState\r\n        );\r\n        if (\r\n          crossFieldMessages === null ||\r\n          crossFieldMessages === undefined ||\r\n          typeof crossFieldMessages !== \"object\"\r\n        ) {\r\n          crossFieldMessages = {};\r\n        }\r\n      }\r\n      if (typeof schemaValidation === \"function\") {\r\n        errorMsg = await schemaValidation(field, formState);\r\n      }\r\n      if (Boolean(errorMsg)) {\r\n        return { error: errorMsg, crossFieldMessages, apiResult };\r\n      }\r\n      if (typeof validationFn === \"function\") {\r\n        errorMsgObj = await validationFn(\r\n          field,\r\n          dependentFieldsState,\r\n          formState\r\n        );\r\n        //to handle error type as object or string\r\n        if (typeof errorMsgObj === \"object\") {\r\n          errorMsg = errorMsgObj.error;\r\n          apiResult = errorMsgObj.apiResult;\r\n        } else {\r\n          errorMsg = errorMsgObj;\r\n        }\r\n      }\r\n      return { error: errorMsg, crossFieldMessages, apiResult };\r\n    };\r\n    return wrapperFunctionAlways;\r\n  }\r\n}\r\n","D:\\Ratnaafin\\Ratnafin\\src\\packages\\form\\src\\form.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\packages\\form\\src\\context.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\packages\\form\\src\\types.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\packages\\form\\src\\observer.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\types.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\validateMetaData.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\functionRegistry.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\attachMethodsToMetaData.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\formWrapper.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_los\\pages\\dashboard\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\jsonRuleEngine.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\view\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\constructYupSchema.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\fixSequenceInMetaData.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\extendedFieldTypes.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\constructINITValues.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\extendedTypes.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\groupWiserenderer.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\groupedForms.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\simpleForm.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\coreProducts\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\index.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\assets\\icons\\productIcons.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\view\\wrapper.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\valueRenderer.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\fieldRenderer.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\tabsForm.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\stepperForm.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\coreProducts\\coreProducts.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\types.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\gridWrapper.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\utils\\attachValuesToMetaData.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\view\\groupedView.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dyanmicForm\\view\\simpleView.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\coreProducts\\metaData.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\pages_crm\\pages\\coreProducts\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\registry\\rulesEngine\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\gridController.tsx",["1106"],"import { FC, useState, useMemo, useCallback, useRef } from \"react\";\r\nimport { GridMetaDataType } from \"./types\";\r\nimport { formatSortBy, formatFilterBy, useLocalFilterState } from \"./utils\";\r\nimport { APISDK } from \"registry/fns/sdk\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { filtersAtom } from \"./atoms\";\r\n\r\nimport { DefaultHeaderColumnRenderer } from \"./components\";\r\nimport { DataGrid } from \"./grid\";\r\nimport { filtersRegistration } from \"./components/filters\";\r\n\r\nexport const GirdController: FC<{\r\n  metaData: GridMetaDataType;\r\n  gridCode: string;\r\n}> = ({ metaData, gridCode }) => {\r\n  const columns = useMemo(() => metaData.columns, []);\r\n  const defaultColumn = useMemo(\r\n    () => ({\r\n      width: 150,\r\n      maxWidth: 400,\r\n      minWidth: 50,\r\n      Header: DefaultHeaderColumnRenderer,\r\n    }),\r\n    []\r\n  );\r\n  const getRowId = useCallback(\r\n    (row) => row[metaData?.gridConfig?.rowIdColumn],\r\n    [metaData?.gridConfig?.rowIdColumn]\r\n  );\r\n  const filterTypes = useMemo(() => filtersRegistration, []);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  const [totalRecords, setTotalRecords] = useState(0);\r\n  const [pageCount, setPageCount] = useState(0);\r\n  const fetchIdCounterRef = useRef(0);\r\n  const localFilterManager = useLocalFilterState();\r\n  const globalFiltersState = useRecoilValue(filtersAtom(gridCode));\r\n\r\n  const fetchData = useCallback(\r\n    ({ pageSize, pageIndex, sortBy, filters }) => {\r\n      setLoading(true);\r\n      const currentFetchId = ++fetchIdCounterRef.current;\r\n      const startRow = Number(pageSize) * Number(pageIndex) + 1;\r\n      const endRow = Number(startRow) + Number(pageSize) - 1;\r\n      let localFilters = formatFilterBy(filters);\r\n      let headerFilters: any[] = [];\r\n      if (globalFiltersState !== null) {\r\n        headerFilters = Object.values(globalFiltersState);\r\n      }\r\n      let combinedFilters = [...headerFilters, ...localFilters];\r\n\r\n      APISDK.fetchGridData(\r\n        gridCode,\r\n        startRow,\r\n        endRow,\r\n        formatSortBy(sortBy),\r\n        combinedFilters\r\n      ).then((result) => {\r\n        if (currentFetchId === fetchIdCounterRef.current) {\r\n          if (result.status === \"success\") {\r\n            setData(result?.data?.rows ?? []);\r\n            setPageCount(\r\n              Math.ceil(\r\n                Number(result?.data?.total_count ?? 1) / Number(pageSize)\r\n              )\r\n            );\r\n            setTotalRecords(Number(result?.data?.total_count ?? 1));\r\n            setLoading(false);\r\n          } else {\r\n            setLoading(false);\r\n          }\r\n        }\r\n      });\r\n    },\r\n    [setTotalRecords, setLoading, setData, globalFiltersState, gridCode]\r\n  );\r\n\r\n  return (\r\n    <DataGrid\r\n      gridCode={gridCode}\r\n      label={metaData.gridConfig?.gridLabel ?? \"NO_NAME\"}\r\n      globalFilterMeta={metaData?.headerFilters}\r\n      multipleActions={metaData?.multipleActions}\r\n      singleActions={metaData?.singleActions}\r\n      doubleClickAction={metaData?.doubleClickAction}\r\n      setGridAction={metaData?.setAction}\r\n      dense={true}\r\n      localFilterManager={localFilterManager}\r\n      globalFiltersState={globalFiltersState}\r\n      getRowId={getRowId}\r\n      columns={columns}\r\n      filterTypes={filterTypes}\r\n      defaultColumn={defaultColumn}\r\n      defaultHiddenColumns={metaData.hiddenColumns}\r\n      loading={loading}\r\n      data={data}\r\n      onFetchData={fetchData}\r\n      pageCount={pageCount}\r\n      totalRecords={totalRecords}\r\n      pageSizes={metaData.gridConfig?.pageSize}\r\n      defaultPageSize={metaData.gridConfig?.defaultPageSize}\r\n      allowColumnReordering={\r\n        metaData.gridConfig?.allowColumnReordering ?? false\r\n      }\r\n      allowColumnHiding={metaData.gridConfig?.allowColumnHiding ?? false}\r\n      allowKeyboardNavigation={\r\n        metaData.gridConfig?.allowKeyboardNavigation ?? false\r\n      }\r\n      allowGlobalFilter={metaData.gridConfig?.allowGlobalFilter ?? false}\r\n    />\r\n  );\r\n};\r\n","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\utils\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\grid.tsx",["1107"],"import { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  useTable,\r\n  usePagination,\r\n  useSortBy,\r\n  useResizeColumns,\r\n  useBlockLayout,\r\n  useRowSelect,\r\n  useFilters,\r\n  useColumnOrder,\r\n  useAsyncDebounce,\r\n} from \"react-table\";\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { TableHeaderToolbar } from \"./tableHeaderToolbar\";\r\n\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport { StickyTableHead } from \"./stickyTableHead\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport { MyTableRow } from \"./focusableTableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport { TablePaginationActions } from \"./tablePaginationToolbar\";\r\nimport { TableHeaderFilterToolbar } from \"./tableHeaderFilterToolbar\";\r\nimport { TableActionToolbar, ActionContextMenu } from \"./tableActionToolbar\";\r\n\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport { LinearProgressBarSpacer } from \"./linerProgressBarSpacer\";\r\n\r\nimport { CustomBackdrop } from \"./backdrop\";\r\nimport { useCheckboxColumn } from \"./components\";\r\nimport { HeaderCellWrapper } from \"./headerCellWrapper\";\r\nimport { RowCellWrapper } from \"./rowCellWrapper\";\r\n\r\nexport const DataGrid = ({\r\n  gridCode,\r\n  label,\r\n  dense,\r\n  localFilterManager,\r\n  globalFiltersState,\r\n  columns,\r\n  defaultColumn,\r\n  data,\r\n  onFetchData,\r\n  loading,\r\n  getRowId,\r\n  totalRecords: controlledTotalRecords,\r\n  pageCount: controlledPageCount,\r\n  pageSizes,\r\n  defaultPageSize,\r\n  defaultHiddenColumns,\r\n  filterTypes,\r\n  allowColumnReordering,\r\n  allowColumnHiding,\r\n  allowKeyboardNavigation,\r\n  allowGlobalFilter,\r\n  globalFilterMeta,\r\n  setGridAction,\r\n  multipleActions,\r\n  singleActions,\r\n  doubleClickAction,\r\n}) => {\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    selectedFlatRows,\r\n    gotoPage,\r\n    setPageSize,\r\n    state: tableState,\r\n    setAllFilters,\r\n    setSortBy,\r\n    columns: availableColumns,\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      defaultColumn,\r\n      data,\r\n      getRowId,\r\n      filterTypes,\r\n      initialState: {\r\n        pageIndex: 0,\r\n        pageSize: defaultPageSize,\r\n        hiddenColumns: defaultHiddenColumns,\r\n      },\r\n      gridCode,\r\n      manualPagination: true,\r\n      pageCount: controlledPageCount,\r\n      autoResetPage: false,\r\n      manualSortBy: true,\r\n      autoResetSortBy: false,\r\n      manualFilters: true,\r\n      autoResetFilters: false,\r\n      localFilterManager,\r\n      globalFiltersState,\r\n      allowColumnReordering: allowColumnReordering,\r\n    },\r\n    useColumnOrder,\r\n    useFilters,\r\n    useSortBy,\r\n    usePagination,\r\n    useRowSelect,\r\n    useResizeColumns,\r\n    useBlockLayout,\r\n    useCheckboxColumn\r\n    //useSequenceColumn\r\n  );\r\n\r\n  const { pageIndex, pageSize, sortBy, filters } = tableState;\r\n  const cellSize = dense ? 34 : 54;\r\n  const emptyRows = pageSize - Math.min(pageSize, page.length);\r\n  const onFetchDataDebounced = useAsyncDebounce(onFetchData, 500);\r\n\r\n  const tbodyRef = useRef(null);\r\n  const [contextMenuPosition, setContextMenuPosition] = useState<{\r\n    mouseX: number;\r\n    mouseY: number;\r\n  } | null>(null);\r\n  const [contextMenuRow, setContextMenuRow] = useState<null | any>(null);\r\n  const [contextMenuSelectedRowId, setContextMenuSelectedRowId] = useState<\r\n    string | null\r\n  >(null);\r\n  const handleContextMenuClose = () => {\r\n    setContextMenuRow(null);\r\n    setContextMenuPosition(null);\r\n    setContextMenuSelectedRowId(null);\r\n  };\r\n  const handleContextMenuOpen = (row) => (e) => {\r\n    e.preventDefault();\r\n    setContextMenuRow(row);\r\n    setContextMenuSelectedRowId(row?.id);\r\n    setContextMenuPosition(\r\n      contextMenuPosition === null\r\n        ? { mouseX: e.clientX - 2, mouseY: e.clientY - 4 }\r\n        : null\r\n    );\r\n  };\r\n  const handleRowDoubleClickAction = (row) => (e) => {\r\n    e.preventDefault();\r\n    setGridAction({\r\n      name: doubleClickAction.actionName,\r\n      rows: [row],\r\n    });\r\n  };\r\n\r\n  const handleKeyDown = (event, row) => {\r\n    event.stopPropagation();\r\n    //@ts-ignore\r\n    const currentRow = tbodyRef.current?.children.namedItem(row.id);\r\n    //@ts-ignore\r\n    let rowToFocus;\r\n    switch (event.keyCode) {\r\n      case 38:\r\n        rowToFocus = currentRow?.previousElementSibling;\r\n        if (rowToFocus !== null) {\r\n          rowToFocus?.focus();\r\n          event.preventDefault();\r\n          //@ts-ignore\r\n          if (rowToFocus.offsetTop > tbodyRef.current?.offsetHeight) {\r\n            console.log(\"need to scroll here\");\r\n          }\r\n        }\r\n        break;\r\n      case 40:\r\n        rowToFocus = currentRow?.nextElementSibling;\r\n        if (rowToFocus !== null) {\r\n          rowToFocus?.focus();\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n      case 32:\r\n        row.toggleRowSelected();\r\n        event.preventDefault();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    onFetchDataDebounced({ pageIndex, pageSize, sortBy, filters });\r\n  }, [onFetchDataDebounced, pageIndex, pageSize, sortBy, filters]);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    gotoPage(newPage);\r\n  };\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setPageSize(Number(event.target.value));\r\n  };\r\n\r\n  useEffect(() => {\r\n    setAllFilters([]);\r\n    setSortBy([]);\r\n    gotoPage(0);\r\n    localFilterManager.clearFilterState();\r\n  }, [\r\n    setAllFilters,\r\n    setSortBy,\r\n    gotoPage,\r\n    globalFiltersState,\r\n    localFilterManager.clearFilterState,\r\n  ]);\r\n\r\n  return (\r\n    <Paper\r\n      style={{\r\n        width: \"100%\",\r\n      }}\r\n    >\r\n      <TableHeaderToolbar\r\n        label={label}\r\n        dense={dense}\r\n        visibleColumns={availableColumns}\r\n        defaultHiddenColumns={defaultHiddenColumns}\r\n        allowColumnHiding={allowColumnHiding}\r\n      />\r\n      <TableActionToolbar\r\n        dense={dense}\r\n        selectedFlatRows={selectedFlatRows}\r\n        multipleActions={multipleActions}\r\n        singleActions={singleActions}\r\n        setGridAction={setGridAction}\r\n      />\r\n      <ActionContextMenu\r\n        selectedFlatRows={contextMenuRow}\r\n        singleActions={singleActions}\r\n        setGridAction={setGridAction}\r\n        mouseX={contextMenuPosition?.mouseX ?? null}\r\n        mouseY={contextMenuPosition?.mouseY ?? null}\r\n        handleClose={handleContextMenuClose}\r\n      />\r\n      {allowGlobalFilter ? (\r\n        <TableHeaderFilterToolbar\r\n          dense={dense}\r\n          filters={globalFilterMeta}\r\n          gridCode={gridCode}\r\n        />\r\n      ) : null}\r\n      {loading ? <LinearProgress /> : <LinearProgressBarSpacer />}\r\n      <TableContainer style={{ position: \"relative\" }}>\r\n        <Table\r\n          component=\"div\"\r\n          {...getTableProps()}\r\n          size={dense ? \"small\" : \"medium\"}\r\n        >\r\n          {/*@ts-ignore*/}\r\n          <StickyTableHead component=\"div\">\r\n            {headerGroups.map((headerGroup) => {\r\n              return (\r\n                <TableRow\r\n                  component=\"div\"\r\n                  {...headerGroup.getHeaderGroupProps()}\r\n                >\r\n                  {headerGroup.headers.map((column) => {\r\n                    return (\r\n                      <HeaderCellWrapper\r\n                        column={column}\r\n                        key={column.getHeaderProps().key}\r\n                      >\r\n                        {column.render(\"Header\")}\r\n                      </HeaderCellWrapper>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </StickyTableHead>\r\n          <TableBody\r\n            component=\"div\"\r\n            ref={tbodyRef}\r\n            {...getTableBodyProps([\r\n              {\r\n                style: {\r\n                  display: \"block\",\r\n                  maxHeight: \"calc(100vh - 42*8px)\",\r\n                },\r\n              },\r\n            ])}\r\n          >\r\n            {page.map((row, index) => {\r\n              prepareRow(row);\r\n              const rightClickHandler = handleContextMenuOpen(row);\r\n              const thisRowDblClickHandler = handleRowDoubleClickAction(row);\r\n              return (\r\n                <MyTableRow\r\n                  {...row.getRowProps()}\r\n                  id={row.id}\r\n                  tabIndex={0}\r\n                  component=\"div\"\r\n                  selected={\r\n                    row.isSelected || contextMenuSelectedRowId === row.id\r\n                  }\r\n                  onKeyDown={\r\n                    allowKeyboardNavigation\r\n                      ? (e) => handleKeyDown(e, row)\r\n                      : undefined\r\n                  }\r\n                  onContextMenu={rightClickHandler}\r\n                  onDoubleClick={\r\n                    Boolean(doubleClickAction)\r\n                      ? thisRowDblClickHandler\r\n                      : undefined\r\n                  }\r\n                >\r\n                  {row.cells.map((cell) => {\r\n                    return (\r\n                      <RowCellWrapper\r\n                        key={cell.getCellProps().key}\r\n                        cell={cell}\r\n                        index={index}\r\n                      >\r\n                        {cell.render(\"Cell\", { index: index })}\r\n                      </RowCellWrapper>\r\n                    );\r\n                  })}\r\n                </MyTableRow>\r\n              );\r\n            })}\r\n            {emptyRows > 0 ? (\r\n              <TableRow\r\n                component=\"div\"\r\n                style={{ height: emptyRows * cellSize }}\r\n              >\r\n                <TableCell component=\"div\" />\r\n              </TableRow>\r\n            ) : null}\r\n          </TableBody>\r\n        </Table>\r\n        <CustomBackdrop open={loading} />\r\n      </TableContainer>\r\n      <TablePagination\r\n        style={{ display: \"flex\" }}\r\n        variant=\"body\"\r\n        component=\"div\"\r\n        rowsPerPageOptions={pageSizes}\r\n        colSpan={3}\r\n        count={controlledTotalRecords}\r\n        rowsPerPage={Number(pageSize)}\r\n        page={Number(pageIndex)}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        ActionsComponent={TablePaginationActions}\r\n      />\r\n    </Paper>\r\n  );\r\n};\r\n","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\spacer\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\rating\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\slider\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\derived\\numberFormat\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\toggleButtonGroup\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\radio\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\derived\\passwordField\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\valueField\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\select\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\datetime\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\switch\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\checkbox\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\autocomplete\\index.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\utils\\attachAlignmentProps.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\utils\\extractHiddenColumns.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\utils\\attachCellComponentsToMetaData.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\utils\\attachGlobalFilterProps.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\utils\\attachFilterProps.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\utils\\sortColumnBySequence.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\utils\\utils.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\utils\\splitActions.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\filters\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\atoms\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\tablePaginationToolbar.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\backdrop.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\tableHeaderToolbar.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\headerCellWrapper.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\linerProgressBarSpacer.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\focusableTableRow.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\stickyTableHead.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\rowCellWrapper.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\tableHeaderFilterToolbar.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\tableActionToolbar.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\spacer\\spacer.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\toggleButtonGroup\\toggleButtonGroup.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\rating\\rating.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\slider\\slider.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\derived\\passwordField\\passwordField.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\derived\\numberFormat\\numberFormat.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\valueField\\valueField.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\radio\\radio.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\select\\select.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\switch\\switchGroup.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\datetime\\timePicker.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\datetime\\datePicker.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\datetime\\datetimePicker.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\switch\\switch.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\checkbox\\checkbox.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\checkbox\\checkboxGroup.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\autocomplete\\autocomplete.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\defaultHeaderColumnRenderer.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\useCheckbox.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\useSequence.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\filters\\registration.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\filters\\valueFilter.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\filters\\rangeFilter.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\filters\\optionsFilter.tsx",["1108"],"import { useEffect, useState } from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport { FilterContainer } from \"./filterContainer\";\r\nimport { StyledTextField, StyledMenuItem } from \"./styledComponents\";\r\nimport { APISDK } from \"registry/fns/sdk\";\r\n\r\n// const ITEM_HEIGHT = 48;\r\n// const ITEM_PADDING_TOP = 8;\r\n\r\nexport const OptionsFilter = (props) => {\r\n  const {\r\n    column: {\r\n      filterValue,\r\n      setFilter,\r\n      filterComponentProps: { selectType },\r\n      id,\r\n    },\r\n    globalFiltersState,\r\n    localFilterManager,\r\n    gridCode,\r\n    handleClose,\r\n    setSortBy,\r\n    gotoPage,\r\n  } = props;\r\n  const isMultiple = selectType === \"multiple\" ? true : false;\r\n  const [loading, setLoading] = useState(false);\r\n  const [_options, setOptions] = useState(\r\n    localFilterManager.getFilterState(id)?.options ?? []\r\n  );\r\n  const defaultValue = Boolean(filterValue?.value)\r\n    ? filterValue?.value\r\n    : isMultiple\r\n    ? []\r\n    : \"\";\r\n\r\n  const [value, setValue] = useState<string | string[]>(defaultValue);\r\n  useEffect(() => {\r\n    if (!Boolean(localFilterManager.getFilterState(id))) {\r\n      setLoading(true);\r\n      const verifiedGlobalFilter =\r\n        typeof globalFiltersState === \"object\" && globalFiltersState !== null\r\n          ? Object.values(globalFiltersState)\r\n          : [];\r\n      APISDK.fetchGridColumnFilterProps(gridCode, {\r\n        accessor: id,\r\n        result_type: \"getGroups\",\r\n        filter_conditions: verifiedGlobalFilter,\r\n      }).then((result) => {\r\n        if (result.status === \"success\") {\r\n          localFilterManager.addFilterState(id, {\r\n            options: result.data?.groups,\r\n          });\r\n          setOptions(result.data?.groups ?? []);\r\n          setLoading(false);\r\n        } else {\r\n          setLoading(false);\r\n          setOptions([{ label: \"Couldnt load data\", value: \"\" }]);\r\n        }\r\n      });\r\n    }\r\n  }, [gridCode, id, setLoading, setOptions]);\r\n\r\n  const handleSelectChange = (event: React.ChangeEvent<any>) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const applyFilter = () => {\r\n    setFilter({\r\n      condition: isMultiple ? \"in\" : \"equal\",\r\n      value,\r\n    });\r\n    setSortBy([]);\r\n    gotoPage(0);\r\n    handleClose();\r\n  };\r\n  const clearFilter = () => {\r\n    setFilter(\"\");\r\n    setSortBy([]);\r\n    gotoPage(0);\r\n    handleClose();\r\n  };\r\n\r\n  const menuItems = _options.map((menuItem, index) => {\r\n    return (\r\n      <StyledMenuItem\r\n        //keep button value to true else keyboard navigation for select will stop working\r\n        button={true}\r\n        key={menuItem.value ?? index}\r\n        value={menuItem.value}\r\n      >\r\n        {isMultiple ? (\r\n          <Checkbox\r\n            checked={\r\n              Boolean(isMultiple)\r\n                ? Array.isArray(value) && value.indexOf(menuItem.value) >= 0\r\n                : value === menuItem.value\r\n            }\r\n          />\r\n        ) : null}\r\n        {menuItem.label}\r\n      </StyledMenuItem>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <FilterContainer applyFilter={applyFilter} clearFilter={clearFilter}>\r\n      {(classes) => (\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"space-between\"\r\n          alignItems=\"center\"\r\n          px={2}\r\n          mt={2}\r\n        >\r\n          <FormControl fullWidth>\r\n            <StyledTextField\r\n              fullWidth\r\n              select={true}\r\n              value={value}\r\n              SelectProps={{\r\n                multiple: isMultiple ? true : false,\r\n                native: false,\r\n                renderValue: isMultiple\r\n                  ? (values: any[] | any) => {\r\n                      if (!Array.isArray(values)) {\r\n                        values = [values];\r\n                      }\r\n                      if (Array.isArray(_options)) {\r\n                        return _options.reduce((acc, current) => {\r\n                          if (values.indexOf(current.value) >= 0) {\r\n                            if (acc === \"\") {\r\n                              return current.label;\r\n                            } else {\r\n                              return `${acc},${current.label}`;\r\n                            }\r\n                          }\r\n                          return acc;\r\n                        }, \"\");\r\n                      }\r\n                      return \"\";\r\n                    }\r\n                  : undefined,\r\n              }}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              InputProps={{\r\n                endAdornment: loading ? (\r\n                  <InputAdornment position=\"end\">\r\n                    <CircularProgress color=\"primary\" variant=\"indeterminate\" />\r\n                  </InputAdornment>\r\n                ) : null,\r\n              }}\r\n              onChange={handleSelectChange}\r\n              className={classes.multipleSelect}\r\n            >\r\n              {menuItems}\r\n            </StyledTextField>\r\n          </FormControl>\r\n        </Box>\r\n      )}\r\n    </FilterContainer>\r\n  );\r\n};\r\n","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\columnVisibility.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\cells\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\filters\\style.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\globalFilters\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\filters\\filterContainer.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\filters\\styledComponents.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\utils\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\cells\\currencyRowCellRenderer.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\cells\\defaultRowCellRenderer.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\utils\\optionsFetcher.ts",["1109","1110"],"import { useState, useRef, useCallback, useEffect } from \"react\";\r\n\r\nexport const useOptionsFetcher = (\r\n  formState,\r\n  options,\r\n  setOptions,\r\n  handleChangeInterceptor,\r\n  dependentValues,\r\n  incomingMessage,\r\n  runValidation,\r\n  whenToRunValidation\r\n) => {\r\n  const lastOptionsPromise = useRef<Promise<any> | null>(null);\r\n  const [loadingOptions, setLoadingOptions] = useState(false);\r\n\r\n  //formState value mutates causing this component to rerender, need to fix\r\n  //for now we wont pass form state as depedency and fix it but needs investigation why this\r\n  //is happening\r\n  const syncAsyncSetOptions = useCallback(\r\n    (options, dependentValues) => {\r\n      if (Array.isArray(options)) {\r\n        setOptions(options);\r\n      } else if (typeof options === \"function\") {\r\n        try {\r\n          setLoadingOptions(true);\r\n          setOptions([{ label: \"loading...\", value: null }]);\r\n          let currentPromise = Promise.resolve(\r\n            options(dependentValues, formState)\r\n          );\r\n          lastOptionsPromise.current = currentPromise;\r\n          currentPromise\r\n            .then((result) => {\r\n              setLoadingOptions(false);\r\n              if (lastOptionsPromise.current === currentPromise) {\r\n                if (Array.isArray(result)) {\r\n                  setOptions(result);\r\n                } else {\r\n                  setOptions([{ label: \"Couldn't fetch\", value: null }]);\r\n                  console.log(\r\n                    `expected optionsFunction in select component to return array of OptionsType but got: ${result}`\r\n                  );\r\n                }\r\n              }\r\n            })\r\n            .catch((e) => {\r\n              setLoadingOptions(false);\r\n              setOptions([{ label: \"Couldn't fetch\", value: null }]);\r\n              console.log(`error occured while fetching options`, e?.message);\r\n            });\r\n        } catch (e) {\r\n          setLoadingOptions(false);\r\n          setOptions([{ label: \"Couldn't fetch\", value: null }]);\r\n          console.log(`error occured while fetching options`, e?.message);\r\n        }\r\n      }\r\n    },\r\n    [setOptions]\r\n  );\r\n  const values = useRef({\r\n    options,\r\n    dependentValues,\r\n    syncAsyncSetOptions,\r\n    formState,\r\n  });\r\n  useEffect(() => {\r\n    syncAsyncSetOptions(options, dependentValues);\r\n  }, [options, dependentValues, syncAsyncSetOptions]);\r\n\r\n  useEffect(() => {\r\n    if (incomingMessage !== null && typeof incomingMessage === \"object\") {\r\n      const { value, options } = incomingMessage;\r\n      //this a patch to not change current value we have as default value\r\n      if (value !== \"DEFAULT_VALUE\") {\r\n        handleChangeInterceptor(value);\r\n      }\r\n      if (whenToRunValidation === \"onBlur\") {\r\n        runValidation({ value: value }, true);\r\n      }\r\n      if (Array.isArray(options)) {\r\n        setOptions(options);\r\n      }\r\n    }\r\n  }, [\r\n    incomingMessage,\r\n    setOptions,\r\n    handleChangeInterceptor,\r\n    runValidation,\r\n    whenToRunValidation,\r\n  ]);\r\n\r\n  return { loadingOptions };\r\n};\r\n","D:\\Ratnaafin\\Ratnafin\\src\\components\\common\\utils\\utils.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\cells\\dateRowCellRenderer.tsx",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\toggleButtonGroup\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\checkbox\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\datetime\\index.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\globalFilters\\groupByExclusiveFilter.tsx",["1111"],"import { Fragment, useEffect, useState, useRef } from \"react\";\r\nimport { useSetRecoilState, useResetRecoilState, useRecoilValue } from \"recoil\";\r\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { APISDK } from \"registry/fns/sdk\";\r\nimport { filterAtom, filtersAtom, subscribeToFilterChange } from \"../../atoms\";\r\n\r\nexport const GroupByExclusiveFilter = (props) => {\r\n  const {\r\n    accessor,\r\n    result_type,\r\n    columnName,\r\n    dependencies,\r\n    last,\r\n    gridCode,\r\n  } = props;\r\n\r\n  //set indivial filter state\r\n  const setFilterCondition = useSetRecoilState(\r\n    filterAtom(`${gridCode}/${accessor}`)\r\n  );\r\n  //the last filter will set the state of all the dependent filters\r\n  const setFiltersCondition = useSetRecoilState(filtersAtom(gridCode));\r\n  //filter dependencies\r\n  const dependentFilters = useRecoilValue(\r\n    subscribeToFilterChange({ gridCode: gridCode, accessors: dependencies })\r\n  );\r\n  //clear filter on unmount\r\n  const resetFilter = useResetRecoilState(\r\n    filterAtom(`${gridCode}/${accessor}`)\r\n  );\r\n  useEffect(() => {\r\n    return resetFilter;\r\n  }, [resetFilter]);\r\n\r\n  const [groups, setGroups] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [value, setValue] = useState(\"all\");\r\n  const apiCount = useRef(0);\r\n\r\n  useEffect(() => {\r\n    if (typeof value === \"string\" && value !== \"all\") {\r\n      const condition = {\r\n        accessor,\r\n        condition: \"equal\",\r\n        value,\r\n      };\r\n      setFilterCondition(condition);\r\n      if (last) {\r\n        setFiltersCondition([...dependentFilters, condition]);\r\n      }\r\n    } else {\r\n      setFilterCondition(null);\r\n    }\r\n  }, [value, last, accessor, setFilterCondition, setFiltersCondition]);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    setError(\"\");\r\n    setValue(\"all\");\r\n    if (last) {\r\n      setFiltersCondition(dependentFilters);\r\n    }\r\n    let currentCount = ++apiCount.current;\r\n    let promise = APISDK.fetchGridColumnFilterProps(gridCode, {\r\n      accessor,\r\n      result_type,\r\n      filter_conditions: dependentFilters,\r\n    });\r\n    promise\r\n      .then((result) => {\r\n        if (currentCount === apiCount.current) {\r\n          setLoading(false);\r\n          if (result.status === \"success\") {\r\n            setGroups(result?.data?.groups ?? []);\r\n          } else {\r\n            setGroups([]);\r\n            console.log(result);\r\n            setError(\"Error fetching filters\");\r\n          }\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        setGroups([]);\r\n        console.log(err);\r\n        setError(\"Error fetching filter\");\r\n      });\r\n  }, [\r\n    last,\r\n    dependentFilters,\r\n    accessor,\r\n    gridCode,\r\n    result_type,\r\n    setFiltersCondition,\r\n    setLoading,\r\n    setGroups,\r\n    setError,\r\n    setValue,\r\n  ]);\r\n\r\n  const buttons = groups.map((one) => {\r\n    return (\r\n      <ToggleButton key={one.value} value={one.value}>\r\n        {one.label} ({one.count})\r\n      </ToggleButton>\r\n    );\r\n  });\r\n  return (\r\n    <Fragment>\r\n      <Typography style={{ display: \"inline-flex\" }}>{columnName}</Typography>\r\n      {loading ? (\r\n        \"loading filter...\"\r\n      ) : Boolean(error) ? (\r\n        error\r\n      ) : (\r\n        <ToggleButtonGroup\r\n          size=\"small\"\r\n          value={value}\r\n          onChange={(_, value) => {\r\n            setValue(value);\r\n          }}\r\n          exclusive={true}\r\n        >\r\n          {buttons}\r\n          <ToggleButton key={`${accessor}-all-single`} value=\"all\">\r\n            Clear\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\globalFilters\\dateRangeFilter.tsx",["1112"],"import { Fragment, useEffect, useState } from \"react\";\r\nimport { useSetRecoilState, useRecoilValue, useResetRecoilState } from \"recoil\";\r\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {\r\n  filterAtom,\r\n  filtersAtom,\r\n  subscribeToFilterChange,\r\n  QueryType,\r\n} from \"../../atoms\";\r\nimport { subDays } from \"date-fns\";\r\n\r\nexport const DaysFilter = (props) => {\r\n  const { accessor, columnName, dependencies, last, gridCode } = props;\r\n\r\n  //set indivial filter state\r\n  const setFilterCondition = useSetRecoilState(\r\n    filterAtom(`${gridCode}/${accessor}`)\r\n  );\r\n  //the last filter will set the state of all the dependent filters\r\n  const setFiltersCondition = useSetRecoilState(filtersAtom(gridCode));\r\n  const [toggleState, setToggleState] = useState(\"\");\r\n  const [condition, setCondition] = useState<QueryType | null>(null);\r\n  const dependentFilters = useRecoilValue(\r\n    subscribeToFilterChange({ gridCode: gridCode, accessors: dependencies })\r\n  );\r\n  const resetFilter = useResetRecoilState(\r\n    filterAtom(`${gridCode}/${accessor}`)\r\n  );\r\n  //reset the filter when component unmounts\r\n  useEffect(() => {\r\n    return resetFilter;\r\n  }, [resetFilter]);\r\n\r\n  useEffect(() => {\r\n    setFilterCondition(condition);\r\n    if (last) {\r\n      if (condition !== null) {\r\n        setFiltersCondition([...dependentFilters, condition]);\r\n      } else {\r\n        setFiltersCondition([...dependentFilters]);\r\n      }\r\n    }\r\n  }, [condition, last, setFilterCondition, setFiltersCondition]);\r\n\r\n  useEffect(() => {\r\n    setCondition(null);\r\n    if (last) {\r\n      setFiltersCondition(dependentFilters);\r\n    }\r\n  }, [last, dependentFilters, setFilterCondition, setFiltersCondition]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Typography style={{ display: \"inline-flex\" }}>{columnName}</Typography>\r\n      <ToggleButtonGroup\r\n        size=\"small\"\r\n        value={toggleState}\r\n        onChange={(event, value) => {\r\n          setToggleState(value);\r\n        }}\r\n        exclusive={true}\r\n      >\r\n        <ToggleButton\r\n          key={\"todays\"}\r\n          value={\"todays\"}\r\n          onClick={() =>\r\n            setCondition({\r\n              condition: \"equal\",\r\n              value: new Date(),\r\n              accessor: accessor,\r\n            })\r\n          }\r\n        >\r\n          Todays\r\n        </ToggleButton>\r\n        <ToggleButton\r\n          key={\"last week\"}\r\n          value={\"last week\"}\r\n          onClick={() =>\r\n            setCondition({\r\n              condition: \"between\",\r\n              value: [subDays(new Date(), 7), new Date()],\r\n              accessor: accessor,\r\n            })\r\n          }\r\n        >\r\n          Last Week\r\n        </ToggleButton>\r\n        <ToggleButton\r\n          key={\"last month\"}\r\n          value={\"last month\"}\r\n          onClick={() =>\r\n            setCondition({\r\n              condition: \"between\",\r\n              value: [subDays(new Date(), 30), new Date()],\r\n              accessor: accessor,\r\n            })\r\n          }\r\n        >\r\n          Last Month\r\n        </ToggleButton>\r\n        <ToggleButton\r\n          key={\"all\"}\r\n          value={\"all\"}\r\n          onClick={() => setCondition(null)}\r\n        >\r\n          All\r\n        </ToggleButton>\r\n      </ToggleButtonGroup>\r\n    </Fragment>\r\n  );\r\n};\r\n","D:\\Ratnaafin\\Ratnafin\\src\\components\\dataTable\\components\\globalFilters\\groupByMultipleFilter.tsx",["1113"],"import { Fragment, useEffect, useState, useRef } from \"react\";\r\nimport { useSetRecoilState, useResetRecoilState, useRecoilValue } from \"recoil\";\r\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { APISDK } from \"registry/fns/sdk\";\r\nimport { filterAtom, filtersAtom, subscribeToFilterChange } from \"../../atoms\";\r\n\r\nexport const GroupByMultipleFilter = (props) => {\r\n  const {\r\n    accessor,\r\n    result_type,\r\n    columnName,\r\n    dependencies,\r\n    last,\r\n    gridCode,\r\n  } = props;\r\n\r\n  //set indivial filter state\r\n  const setFilterCondition = useSetRecoilState(\r\n    filterAtom(`${gridCode}/${accessor}`)\r\n  );\r\n  //the last filter will set the state of all the dependent filters\r\n  const setFiltersCondition = useSetRecoilState(filtersAtom(gridCode));\r\n  //filter dependencies\r\n  const dependentFilters = useRecoilValue(\r\n    subscribeToFilterChange({ gridCode: gridCode, accessors: dependencies })\r\n  );\r\n  //clear filter on unmount\r\n  const resetFilter = useResetRecoilState(\r\n    filterAtom(`${gridCode}/${accessor}`)\r\n  );\r\n  useEffect(() => {\r\n    return resetFilter;\r\n  }, [resetFilter]);\r\n\r\n  const [groups, setGroups] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [value, setValue] = useState([]);\r\n  const [clear, setClear] = useState(true);\r\n  const apiCount = useRef(0);\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(value) && value.length > 0) {\r\n      const condition = {\r\n        accessor,\r\n        condition: \"in\",\r\n        value,\r\n      };\r\n      setFilterCondition(condition);\r\n      if (last) {\r\n        setFiltersCondition([...dependentFilters, condition]);\r\n      }\r\n    } else {\r\n      setFilterCondition(null);\r\n    }\r\n  }, [value, last, accessor, setFilterCondition, setFiltersCondition]);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    setError(\"\");\r\n    setValue([]);\r\n    setClear(true);\r\n    if (last) {\r\n      setFiltersCondition(dependentFilters);\r\n    }\r\n    let currentCount = ++apiCount.current;\r\n    let promise = APISDK.fetchGridColumnFilterProps(gridCode, {\r\n      accessor,\r\n      result_type,\r\n      filter_conditions: dependentFilters,\r\n    });\r\n    promise\r\n      .then((result) => {\r\n        if (currentCount === apiCount.current) {\r\n          setLoading(false);\r\n          if (result.status === \"success\") {\r\n            setGroups(result?.data?.groups ?? []);\r\n          } else {\r\n            setGroups([]);\r\n            console.log(result);\r\n            setError(\"Error fetching filters\");\r\n          }\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        setGroups([]);\r\n        console.log(err);\r\n        setError(\"Error fetching filter\");\r\n      });\r\n  }, [\r\n    last,\r\n    dependentFilters,\r\n    accessor,\r\n    gridCode,\r\n    result_type,\r\n    setFiltersCondition,\r\n    setLoading,\r\n    setGroups,\r\n    setError,\r\n    setClear,\r\n  ]);\r\n\r\n  const buttons = groups.map((one) => {\r\n    return (\r\n      <ToggleButton key={one.value} value={one.value}>\r\n        {one.label} ({one.count})\r\n      </ToggleButton>\r\n    );\r\n  });\r\n  return (\r\n    <Fragment>\r\n      <Typography style={{ display: \"inline-flex\" }}>{columnName}</Typography>\r\n      {loading ? (\r\n        \"loading filter...\"\r\n      ) : Boolean(error) ? (\r\n        error\r\n      ) : (\r\n        <>\r\n          <ToggleButtonGroup\r\n            size=\"small\"\r\n            onChange={(_, value) => {\r\n              setValue(value);\r\n              setClear(false);\r\n            }}\r\n            value={value}\r\n            exclusive={false}\r\n          >\r\n            {buttons}\r\n            <ToggleButton\r\n              selected={clear}\r\n              key={`${accessor}-all-single`}\r\n              value={\"\"}\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                setValue([]);\r\n                setClear(true);\r\n              }}\r\n            >\r\n              Clear\r\n            </ToggleButton>\r\n          </ToggleButtonGroup>\r\n        </>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n","D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\toggleButtonGroup\\toggleButtonGroup.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\checkbox\\checkbox.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\datetime\\dateTimePicker.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\datetime\\datePicker.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\datetime\\timePicker.ts",[],"D:\\Ratnaafin\\Ratnafin\\src\\components\\styledComponent\\datetime\\styles.ts",[],{"ruleId":"1114","replacedBy":"1115"},{"ruleId":"1116","replacedBy":"1117"},{"ruleId":"1118","severity":1,"message":"1119","line":15,"column":19,"nodeType":"1120","messageId":"1121","endLine":17,"endColumn":2},{"ruleId":"1122","severity":1,"message":"1123","line":36,"column":41,"nodeType":"1124","endLine":36,"endColumn":61},{"ruleId":"1122","severity":1,"message":"1125","line":53,"column":10,"nodeType":"1124","endLine":53,"endColumn":48},{"ruleId":"1114","replacedBy":"1115"},{"ruleId":"1116","replacedBy":"1117"},{"ruleId":"1126","severity":1,"message":"1127","line":13,"column":10,"nodeType":"1128","messageId":"1129","endLine":13,"endColumn":20},{"ruleId":"1126","severity":1,"message":"1130","line":15,"column":9,"nodeType":"1128","messageId":"1129","endLine":15,"endColumn":24},{"ruleId":"1126","severity":1,"message":"1131","line":31,"column":10,"nodeType":"1128","messageId":"1129","endLine":31,"endColumn":12},{"ruleId":"1126","severity":1,"message":"1132","line":32,"column":10,"nodeType":"1128","messageId":"1129","endLine":32,"endColumn":23},{"ruleId":"1126","severity":1,"message":"1133","line":26,"column":10,"nodeType":"1128","messageId":"1129","endLine":26,"endColumn":24},{"ruleId":"1126","severity":1,"message":"1134","line":26,"column":26,"nodeType":"1128","messageId":"1129","endLine":26,"endColumn":43},{"ruleId":"1126","severity":1,"message":"1135","line":33,"column":5,"nodeType":"1128","messageId":"1129","endLine":33,"endColumn":14},{"ruleId":"1136","severity":1,"message":"1137","line":69,"column":6,"nodeType":"1138","endLine":69,"endColumn":8,"suggestions":"1139"},{"ruleId":"1126","severity":1,"message":"1140","line":282,"column":9,"nodeType":"1128","messageId":"1129","endLine":282,"endColumn":16},{"ruleId":"1126","severity":1,"message":"1141","line":74,"column":10,"nodeType":"1128","messageId":"1129","endLine":74,"endColumn":11},{"ruleId":"1136","severity":1,"message":"1142","line":122,"column":6,"nodeType":"1138","endLine":122,"endColumn":26,"suggestions":"1143"},{"ruleId":"1144","severity":1,"message":"1145","line":19,"column":11,"nodeType":"1146","messageId":"1147","endLine":21,"endColumn":92},{"ruleId":"1144","severity":1,"message":"1145","line":19,"column":11,"nodeType":"1146","messageId":"1147","endLine":21,"endColumn":92},{"ruleId":"1136","severity":1,"message":"1148","line":131,"column":6,"nodeType":"1138","endLine":131,"endColumn":65,"suggestions":"1149"},{"ruleId":"1136","severity":1,"message":"1150","line":16,"column":51,"nodeType":"1138","endLine":16,"endColumn":53,"suggestions":"1151"},{"ruleId":"1136","severity":1,"message":"1152","line":200,"column":6,"nodeType":"1138","endLine":206,"endColumn":4,"suggestions":"1153"},{"ruleId":"1136","severity":1,"message":"1154","line":65,"column":6,"nodeType":"1138","endLine":65,"endColumn":44,"suggestions":"1155"},{"ruleId":"1136","severity":1,"message":"1156","line":57,"column":5,"nodeType":"1138","endLine":57,"endColumn":17,"suggestions":"1157"},{"ruleId":"1126","severity":1,"message":"1158","line":59,"column":9,"nodeType":"1128","messageId":"1129","endLine":59,"endColumn":15},{"ruleId":"1136","severity":1,"message":"1159","line":57,"column":6,"nodeType":"1138","endLine":57,"endColumn":70,"suggestions":"1160"},{"ruleId":"1136","severity":1,"message":"1159","line":45,"column":6,"nodeType":"1138","endLine":45,"endColumn":64,"suggestions":"1161"},{"ruleId":"1136","severity":1,"message":"1159","line":58,"column":6,"nodeType":"1138","endLine":58,"endColumn":70,"suggestions":"1162"},"no-native-reassign",["1163"],"no-negated-in-lhs",["1164"],"no-new-func","The Function constructor is eval.","NewExpression","noFunctionConstructor","react/jsx-pascal-case","Imported JSX component CC_ODFormWrapper must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component CC_ODForm must be in PascalCase or SCREAMING_SNAKE_CASE","@typescript-eslint/no-unused-vars","'OpenDialog' is assigned a value but never used.","Identifier","unusedVar","'handleClickOpen' is assigned a value but never used.","'id' is assigned a value but never used.","'expiryOtpTime' is assigned a value but never used.","'hasDataChanged' is assigned a value but never used.","'setHasDataChanged' is assigned a value but never used.","'flowExist' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refID'. Either include it or remove the dependency array.","ArrayExpression",["1165"],"'classes' is assigned a value but never used.","'_' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fallbackURL', 'flowExist', and 'refID'. Either include them or remove the dependency array.",["1166"],"no-multi-str","Multiline support is limited to browsers supporting ES5 only.","Literal","multilineString","React Hook useEffect has missing dependencies: 'handleBlur' and 'postValidationSetCrossFieldValues'. Either include them or remove the dependency array.",["1167"],"React Hook useMemo has a missing dependency: 'metaData.columns'. Either include it or remove the dependency array.",["1168"],"React Hook useEffect has a missing dependency: 'localFilterManager'. Either include it or remove the dependency array.",["1169"],"React Hook useEffect has missing dependencies: 'globalFiltersState' and 'localFilterManager'. Either include them or remove the dependency array.",["1170"],"React Hook useCallback has a missing dependency: 'formState'. Either include it or remove the dependency array.",["1171"],"'values' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dependentFilters'. Either include it or remove the dependency array.",["1172"],["1173"],["1174"],"no-global-assign","no-unsafe-negation",{"desc":"1175","fix":"1176"},{"desc":"1177","fix":"1178"},{"desc":"1179","fix":"1180"},{"desc":"1181","fix":"1182"},{"desc":"1183","fix":"1184"},{"desc":"1185","fix":"1186"},{"desc":"1187","fix":"1188"},{"desc":"1189","fix":"1190"},{"desc":"1191","fix":"1192"},{"desc":"1189","fix":"1193"},"Update the dependencies array to be: [refID]",{"range":"1194","text":"1195"},"Update the dependencies array to be: [dispatch, fallbackURL, flowExist, navigate, refID]",{"range":"1196","text":"1197"},"Update the dependencies array to be: [setFieldData, registerField, unregisterField, formContext, postValidationSetCrossFieldValues, handleBlur]",{"range":"1198","text":"1199"},"Update the dependencies array to be: [metaData.columns]",{"range":"1200","text":"1201"},"Update the dependencies array to be: [setAllFilters, setSortBy, gotoPage, globalFiltersState, localFilterManager.clearFilterState, localFilterManager]",{"range":"1202","text":"1203"},"Update the dependencies array to be: [globalFiltersState, gridCode, id, localFilterManager, setLoading, setOptions]",{"range":"1204","text":"1205"},"Update the dependencies array to be: [formState, setOptions]",{"range":"1206","text":"1207"},"Update the dependencies array to be: [value, last, accessor, setFilterCondition, setFiltersCondition, dependentFilters]",{"range":"1208","text":"1209"},"Update the dependencies array to be: [condition, dependentFilters, last, setFilterCondition, setFiltersCondition]",{"range":"1210","text":"1211"},{"range":"1212","text":"1209"},[2393,2395],"[refID]",[3402,3422],"[dispatch, fallbackURL, flowExist, navigate, refID]",[4553,4612],"[setFieldData, registerField, unregisterField, formContext, postValidationSetCrossFieldValues, handleBlur]",[653,655],"[metaData.columns]",[5580,5704],"[setAllFilters, setSortBy, gotoPage, globalFiltersState, localFilterManager.clearFilterState, localFilterManager]",[2133,2171],"[globalFiltersState, gridCode, id, localFilterManager, setLoading, setOptions]",[2115,2127],"[formState, setOptions]",[1839,1903],"[value, last, accessor, setFilterCondition, setFiltersCondition, dependentFilters]",[1577,1635],"[condition, dependentFilters, last, setFilterCondition, setFiltersCondition]",[1873,1937]]