export const worklogFormMetaData = {
  form: {
    name: "worklogForm",
    label: "Worklog",
    resetFieldOnUmnount: false,
    validationRun: "onBlur",
    submitAction: "home",
    render: {
      ordering: "auto",
      renderType: "simple",
      gridConfig: {
        item: { xs: 12, sm: 4, md: 4 },
        container: { direction: "row", spacing: 2 },
      },
    },
    componentProps: {
      textField: { fullWidth: true },
      select: { fullWidth: true },
      datePicker: { fullWidth: true },
      timePicker: { fullWidth: true },
      numberFormat: { fullWidth: true },
      inputMask: { fullWidth: true },
    },
  },
  fields: [
    {
      render: { componentType: "hidden" },
      name: "tranID",
    },
    {
      render: { componentType: "datePicker" },
      name: "tranDate",
      label: "Worklog Date",
      placeholder: "dd/mm/yyyy",
      format: "dd/MM/yyyy",
      defaultValue: new Date(),
      isReadOnly: true,
      required: true,
      schemaValidation: {
        type: "date",
        rules: [{ name: "required", params: ["This Field is required"] }],
      },
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "select" },
      name: "type",
      label: "Type",
      placeholder: "Worklog Type",
      options: "getWorkType",
      defaultValue: "00",
      required: true,
      disableCaching: true,
      validate: "getValidateValue",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "select" },
      name: "billable",
      label: "Billable",
      placeholder: "Billable",
      defaultValue: "00",
      options: "getWorkBillable",
      required: true,
      disableCaching: true,
      validate: "getValidateValue",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "spacer" },
      name: "spacer",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "timePicker" },
      name: "startTime",
      label: "Start Time",
      placeholder: "hours:minutes (24hr)",
      format: "HH:mm",
      required: true,
      schemaValidation: {
        type: "date",
        rules: [
          { name: "required", params: ["This Field is required"] },
          { name: "typeError", params: ["Not a valid time"] },
        ],
      },
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "timePicker" },
      name: "endTime",
      label: "End Time",
      placeholder: "hours:minutes (24hr)",
      format: "HH:mm",
      required: true,
      schemaValidation: {
        type: "date",
        rules: [
          { name: "required", params: ["This Field is required"] },
          { name: "typeError", params: ["Not a valid time"] },
        ],
      },
      dependentFields: ["startTime"],
      validationRun: "all",
      runValidationOnDependentFieldsChange: true,
      validate: {
        conditions: {
          any: [
            {
              fact: "dependentFields",
              path: "$.startTime.value",
              operator: "lessThanDate",
              value: {
                fact: "currentField",
                path: "$.value",
              },
            },
          ],
        },
        success: "",
        failure: "Start Time should be greater than to End Time",
      },
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "spacer" },
      name: "spacer1",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "textField" },
      name: "description",
      label: "Description",
      placeholder: "Description",
      multiline: true,
      rows: 3,
      rowsMax: 2,
      maxLength: 500,
      required: true,
      schemaValidation: {
        type: "string",
        rules: [{ name: "required", params: ["This Field is required"] }],
      },
      GridProps: { xs: 12, md: 6, sm: 6 },
    },
  ],
};
