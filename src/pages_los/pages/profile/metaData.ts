export const UserProfileMetaData = {
  form: {
    name: "profile",
    label: "My Profile",
    resetFieldOnUmnount: false,
    validationRun: "onBlur",
    render: {
      ordering: "auto",
      renderType: "simple",
      gridConfig: {
        item: {
          xs: 12,
          sm: 3,
          md: 3,
        },
        container: {
          direction: "row",
          spacing: 2,
        },
      },
    },
    componentProps: {
      datePicker: {
        fullWidth: true,
      },
      select: {
        fullWidth: true,
      },
      textField: {
        fullWidth: true,
      },
      numberFormat: {
        fullWidth: true,
      },
    },
  },
  fields: [
    {
      render: { componentType: "textField", group: 0 },
      name: "salutation",
      sequence: 1,
      type: "text",
      label: "Salutation",
      isReadOnly: false,
      placeholder: "Salutation",
      GridProps: { xs: 12, md: 3, sm: 3 },
      fullWidth: true,
    },
    {
      render: { componentType: "textField", group: 0 },
      name: "firstName",
      sequence: 2,
      type: "text",
      label: "First Name",
      isReadOnly: false,
      required: true,
      placeholder: "First Name",
      GridProps: { xs: 12, md: 3, sm: 3 },
      fullWidth: true,
    },
    {
      render: { componentType: "textField", group: 0 },
      name: "middleName",
      sequence: 3,
      type: "text",
      label: "Middle Name",
      isReadOnly: false,
      placeholder: "Middle Name",
      GridProps: { xs: 12, md: 3, sm: 3 },
      fullWidth: true,
    },
    {
      render: { componentType: "textField", group: 0 },
      name: "lastName",
      sequence: 4,
      type: "text",
      label: "Last Name",
      isReadOnly: false,
      required: true,
      placeholder: "Last Name",
      GridProps: { xs: 12, md: 3, sm: 3 },
      fullWidth: true,
    },
    {
      render: { componentType: "textField", group: 0 },
      name: "gender",
      sequence: 5,
      type: "text",
      label: "Gender",
      isReadOnly: false,
      required: true,
      placeholder: "Gender",
      GridProps: { xs: 12, md: 3, sm: 3 },
      fullWidth: true,
    },
    {
      render: { componentType: "dob", group: 0 },
      name: "dob",
      sequence: 6,
      label: "Date Of Birth",
      placeholder: "dd/mm/yyyy",
      isReadOnly: false,
      required: true,
      format: "dd/MM/yyyy",
      GridProps: { xs: 12, md: 3, sm: 3 },
      validationRun: "all",
      schemaValidation: {
        type: "string",
        rules: [{ name: "required", params: ["This Field is required."] }],
      },
      fullWidth: true,
    },
    {
      render: { componentType: "textField", group: 0 },
      name: "bloodGroup",
      sequence: 7,
      type: "text",
      label: "Blood Group",
      isReadOnly: false,
      placeholder: "Blood Group",
      GridProps: { xs: 12, md: 3, sm: 3 },
      fullWidth: true,
    },
    {
      render: { componentType: "textField", group: 0 },
      name: "emailID",
      sequence: 8,
      type: "text",
      label: "Email ID",
      isReadOnly: false,
      placeholder: "Email ID",
      GridProps: { xs: 12, md: 3, sm: 3 },
      fullWidth: true,
    },
    {
      render: { componentType: "textField", group: 0 },
      name: "panNumber",
      sequence: 9,
      type: "text",
      label: "PAN NO",
      isReadOnly: false,
      required: true,
      placeholder: "PAN NO",
      GridProps: { xs: 12, md: 3, sm: 3 },
      fullWidth: true,
    },
    {
      render: { componentType: "phoneNumber", group: 0 },
      name: "mobileNumber",
      sequence: 10,
      type: "text",
      label: "Mobile Number",
      isReadOnly: false,
      required: true,
      placeholder: "Mobile Number",
      GridProps: { xs: 12, md: 3, sm: 3 },
      fullWidth: true,
    },
    {
      render: { componentType: "textField", group: 0 },
      name: "currentAddress",
      sequence: 11,
      type: "text",
      label: "Current Address",
      isReadOnly: false,
      required: true,
      placeholder: "Current Address",
      schemaValidation: {
        type: "string",
        rules: [{ name: "required", params: ["This Field is required."] }],
      },
      GridProps: { xs: 12, md: 6, sm: 6 },
      fullWidth: true,
    },
    {
      render: { componentType: "textField", group: 0 },
      name: "premanentAddress",
      sequence: 12,
      type: "text",
      label: "Permanent Address",
      isReadOnly: false,
      required: true,
      placeholder: "Permanent Address",
      schemaValidation: {
        type: "string",
        rules: [{ name: "required", params: ["This Field is required."] }],
      },
      GridProps: { xs: 12, md: 6, sm: 6 },
      fullWidth: true,
    },
  ],
};
