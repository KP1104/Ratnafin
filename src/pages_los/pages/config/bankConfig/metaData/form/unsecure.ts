export const unsecureFormMetaData = {
  form: {
    name: "bankMasterUnsecured",
    label: "Bank Master for Unsecure",
    resetFieldOnUmnount: false,
    validationRun: "onBlur",
    submitAction: "home",
    render: {
      ordering: "auto",
      renderType: "simple",
      gridConfig: {
        item: { xs: 12, sm: 4, md: 4 },
        container: { direction: "row", spacing: 2 },
      },
    },
    componentProps: {
      textField: { fullWidth: true },
      select: { fullWidth: true },
      datePicker: { fullWidth: true },
      numberFormat: { fullWidth: true },
      inputMask: { fullWidth: true },
    },
  },
  fields: [
    {
      render: { componentType: "autocomplete" },
      name: "branchID",
      label: "Name of Bank - Branch",
      placeholder: "Select Name of Bank - Branch",
      required: true,
      defaultValue: "00",
      options: "getBankBranchList",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "select" },
      name: "bankBranch",
      label: "Ratnaafin Branch",
      placeholder: "Ratnaafin Branch Select",
      defaultValue: "00",
      options: "getBranchList",
      multiple: true,
      enableVirtualized: true,
      showCheckbox: true,
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "select" },
      name: "productId",
      label: "Product Name",
      placeholder: "Product Name",
      defaultValue: "00",
      options: "getProductTypeForBank",
      multiple: true,
      enableVirtualized: true,
      showCheckbox: true,
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "textField" },
      name: "minAge",
      label: "Min Age",
      placeholder: "Min Age",
      type: "number",
      defaultValue: "0",
      maxLength: 3,
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "textField" },
      name: "maxAge",
      label: "Max Age",
      placeholder: "Max Age",
      defaultValue: "0",
      dependentFields: ["minAge"],
      type: "number",
      maxLength: 3,
      runValidationOnDependentFieldsChange: true,
      validate: {
        conditions: {
          all: [
            {
              fact: "dependentFields",
              path: "$.minAge.value",
              operator: "lessThanInclusiveString",
              value: { fact: "currentField", path: "$.value" },
            },
          ],
        },
        success: "",
        failure: "Max Age should be greate than Min Age.",
      },
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "textField" },
      name: "experience",
      label: "Age of Business (In Years)",
      placeholder: "Age of Business (In Years)",
      maxLength: 3,
      type: "number",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "select" },
      name: "ownershipType",
      label: "Ownership of Premises",
      placeholder: "Ownership of Premises",
      options: "getBusinessPremise",
      defaultValue: "00",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "select" },
      name: "typeOfIndustry",
      label: "Industry",
      placeholder: "Industry",
      options: "getIndustryType",
      defaultValue: "00",
      multiple: true,
      enableVirtualized: true,
      showCheckbox: true,
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "currency" },
      name: "minTurnover",
      label: "Min Turnover",
      placeholder: "Min Turnover",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "currency" },
      name: "annualNetIncome",
      label: "Annual Net Income",
      placeholder: "Annual Net Income",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "textField" },
      name: "creditScore",
      label: "Credit Score",
      placeholder: "Credit Score",
      maxLength: 3,
      type: "number",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "textField" },
      name: "cmrCreditScore",
      label: "Credit Score (CMR)",
      placeholder: "Credit Score (CMR)",
      maxLength: 3,
      type: "number",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "select" },
      name: "chequeBouncesType",
      label: "Cheque Bounces Type",
      placeholder: "Cheque Bounces Type",
      options: [
        {
          label: "Percentage",
          value: "01",
        },
        {
          label: "Flat Value",
          value: "02",
        },
      ],
      defaultValue: "01",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "rateOfIntWithoutValidation" },
      name: "chequeBouncesPercentage",
      label: "Cheque Bounces (%)",
      placeholder: "Cheque Bounces Percentage",
      dependentFields: ["chequeBouncesType"],
      shouldExclude: "shouldShowChequeBouncesPercentageField",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "textField" },
      name: "chequeBounces",
      label: "Cheque Bounces",
      placeholder: "Cheque Bounces",
      maxLength: 3,
      type: "number",
      dependentFields: ["chequeBouncesType"],
      shouldExclude: "shouldShowChequeBouncesFlatValueField",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "currency" },
      name: "minLoanAmount",
      label: "Min Loan Amount",
      placeholder: "Min Loan Amount",
      defaultValue: "0",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "currency" },
      name: "maxLoanAmount",
      label: "Max Loan Amount",
      placeholder: "Max Loan Amount",
      defaultValue: "0",
      dependentFields: ["minLoanAmount"],
      runValidationOnDependentFieldsChange: true,
      validate: {
        conditions: {
          all: [
            {
              fact: "dependentFields",
              path: "$.minLoanAmount.value",
              operator: "lessThanInclusiveString",
              value: { fact: "currentField", path: "$.value" },
            },
          ],
        },
        success: "",
        failure: "Max Loan Amount should be greater than Min Loan Amount.",
      },
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "rateOfIntWithoutValidation" },
      name: "minRate",
      label: "Min ROI",
      placeholder: "Min ROI",
      defaultValue: "0.00",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "rateOfIntWithoutValidation" },
      name: "maxRate",
      label: "Max ROI",
      placeholder: "Max ROI",
      defaultValue: "0.00",
      dependentFields: ["minRate"],
      runValidationOnDependentFieldsChange: true,
      validate: {
        conditions: {
          all: [
            {
              fact: "dependentFields",
              path: "$.minRate.value",
              operator: "lessThanInclusiveString",
              value: { fact: "currentField", path: "$.value" },
            },
          ],
        },
        success: "",
        failure:
          "Max ROI percentage should be greater than Min ROI percentage.",
      },
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "textField" },
      name: "minTenor",
      label: "Min Tenor (In Months)",
      placeholder: "Min Tenor (In Months)",
      maxLength: 3,
      defaultValue: "0",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "textField" },
      name: "maxTenor",
      label: "Max Tenor (In Months)",
      placeholder: "Max Tenor (In Months)",
      maxLength: 3,
      defaultValue: "0",
      dependentFields: ["minTenor"],
      runValidationOnDependentFieldsChange: true,
      validate: {
        conditions: {
          all: [
            {
              fact: "dependentFields",
              path: "$.minTenor.value",
              operator: "lessThanInclusiveString",
              value: { fact: "currentField", path: "$.value" },
            },
          ],
        },
        success: "",
        failure: "Max Tenor should be greater than Min Tenor.",
      },
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "rateOfIntWithoutValidation" },
      name: "fromPayoutRate",
      label: "From Rate of Payout",
      placeholder: "From Rate of Payout",
      defaultValue: "0.00",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "rateOfIntWithoutValidation" },
      name: "toPayoutRate",
      label: "To Rate of Payout",
      placeholder: "To Rate of Payout",
      GridProps: { xs: 12, md: 3, sm: 3 },
      defaultValue: "0.00",
      dependentFields: ["fromPayoutRate"],
      runValidationOnDependentFieldsChange: true,
      validate: {
        conditions: {
          all: [
            {
              fact: "dependentFields",
              path: "$.fromPayoutRate.value",
              operator: "lessThanInclusiveString",
              value: { fact: "currentField", path: "$.value" },
            },
          ],
        },
        success: "",
        failure:
          "To Rate of Payout should be greater than From Rate of Payout.",
      },
    },
  ],
};
