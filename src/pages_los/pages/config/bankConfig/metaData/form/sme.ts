export const smeFormMetaData = {
  form: {
    name: "bankMasterSME",
    label: "Bank Master for SME",
    resetFieldOnUmnount: false,
    validationRun: "onBlur",
    submitAction: "home",
    render: {
      ordering: "auto",
      renderType: "simple",
      gridConfig: {
        item: { xs: 12, sm: 4, md: 4 },
        container: { direction: "row", spacing: 2 },
      },
    },
    componentProps: {
      textField: { fullWidth: true },
      select: { fullWidth: true },
      datePicker: { fullWidth: true },
      numberFormat: { fullWidth: true },
      inputMask: { fullWidth: true },
    },
  },
  fields: [
    {
      render: { componentType: "autocomplete" },
      name: "branchID",
      label: "Name of Bank - Branch",
      placeholder: "Select Name of Bank - Branch",
      required: true,
      defaultValue: "00",
      options: "getBankBranchList",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "select" },
      name: "bankBranch",
      label: "Ratnaafin Branch",
      placeholder: "Ratnaafin Branch Select",
      defaultValue: "00",
      options: "getBranchList",
      multiple: true,
      enableVirtualized: true,
      showCheckbox: true,
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "select" },
      name: "productId",
      label: "Product Name",
      placeholder: "Product Name",
      defaultValue: "00",
      options: "getProductTypeForBank",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "select" },
      name: "subProduct1",
      label: "Sub Product 1",
      defaultValue: "00",
      placeholder: "Sub Product 1",
      dependentFields: ["productId"],
      shouldExclude: "shouldExcludesShowSMELAPSubProductTypeField",
      options: "getBankSubProductType",
      disableCaching: true,
      multiple: true,
      showCheckbox: true,
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "textField" },
      name: "businessVintage",
      label: "Age of Business",
      placeholder: "Age of Business",
      maxLength: 3,
      type: "number",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "textField" },
      name: "promotorAge",
      type: "number",
      label: "Age of main Promoters",
      placeholder: "Age of main Promoters",
      maxLength: 3,
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "currency" },
      name: "toLB",
      label: "Min Turnover",
      defaultValue: "0",
      placeholder: "Min Turnover",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "currency" },
      name: "toUB",
      label: "Max Turnover",
      placeholder: "Max Turnover",
      defaultValue: "0",
      dependentFields: ["toLB"],
      runValidationOnDependentFieldsChange: true,
      validate: {
        conditions: {
          all: [
            {
              fact: "dependentFields",
              path: "$.toLB.value",
              operator: "lessThanInclusiveString",
              value: { fact: "currentField", path: "$.value" },
            },
          ],
        },
        success: "",
        failure: "Max Turnover should be greater than Min Turnover.",
      },
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "currency" },
      name: "loanLB",
      label: "Min Loan Amount",
      placeholder: "Min Loan Amount",
      defaultValue: "0",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "currency" },
      name: "loanUB",
      label: "Max Loan Amount",
      placeholder: "Max Loan Amount",
      defaultValue: "0",
      dependentFields: ["loanLB"],
      runValidationOnDependentFieldsChange: true,
      validate: {
        conditions: {
          all: [
            {
              fact: "dependentFields",
              path: "$.loanLB.value",
              operator: "lessThanInclusiveString",
              value: { fact: "currentField", path: "$.value" },
            },
          ],
        },
        success: "",
        failure: "Max Loan Amount should be greater than Min Loan Amount.",
      },
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "rateOfIntWithoutValidation" },
      name: "collateralCoverage",
      label: "Collateral Coverage",
      placeholder: "Collateral Coverage",
      defaultValue: "0.00",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "rateOfIntWithoutValidation" },
      name: "roiLB",
      label: "Min ROI",
      placeholder: "Min ROI",
      defaultValue: "0.00",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "rateOfIntWithoutValidation" },
      name: "roiUB",
      label: "Max ROI",
      placeholder: "Max ROI",
      defaultValue: "0.00",
      dependentFields: ["roiLB"],
      runValidationOnDependentFieldsChange: true,
      validate: {
        conditions: {
          all: [
            {
              fact: "dependentFields",
              path: "$.roiLB.value",
              operator: "lessThanInclusiveString",
              value: { fact: "currentField", path: "$.value" },
            },
          ],
        },
        success: "",
        failure: "Max ROI should be greater than Min ROI.",
      },
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "textField" },
      name: "promotorMinScore",
      label: "Min Credit Score",
      placeholder: "Min Credit Score",
      maxLength: 3,
      type: "number",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "textField" },
      name: "companyCMR",
      label: "CMR Credit Score",
      placeholder: "CMR Credit Score",
      maxLength: 3,
      type: "number",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "currency" },
      name: "ebidtaAmount",
      label: "EBIDTA Amount As per Audited Financials",
      placeholder: "EBIDTA Amount As per Audited Financials",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "rateOfIntWithoutValidation" },
      name: "currentRatio",
      label: "Current Ratio",
      placeholder: "Current Ratio",
      defaultValue: "0.00",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "rateOfIntWithoutValidation" },
      name: "dscr",
      label: "DSCR As per Audited Financials",
      placeholder: "DSCR As per Audited Financials",
      defaultValue: "0.00",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "select" },
      name: "chequeBouncesType",
      label: "Cheque Bounces Type",
      placeholder: "Cheque Bounces Type",
      options: [
        {
          label: "Percentage",
          value: "01",
        },
        {
          label: "Flat Value",
          value: "02",
        },
      ],
      defaultValue: "01",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "rateOfIntWithoutValidation" },
      name: "chequeBouncesPer",
      label: "Cheque Bounces (%)",
      placeholder: "Cheque Bounces Percentage",
      dependentFields: ["chequeBouncesType"],
      shouldExclude: "shouldShowChequeBouncesPercentageField",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "textField" },
      name: "chequeBounces",
      label: "Cheque Bounces",
      placeholder: "Cheque Bounces",
      maxLength: 3,
      type: "number",
      dependentFields: ["chequeBouncesType"],
      shouldExclude: "shouldShowChequeBouncesFlatValueField",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "select" },
      name: "typeOfIndustry",
      label: "Industry",
      placeholder: "Industry",
      options: "getIndustryType",
      defaultValue: "00",
      multiple: true,
      enableVirtualized: true,
      showCheckbox: true,
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "rateOfIntWithoutValidation" },
      name: "processingFees",
      label: "Processing Fees",
      placeholder: "Processing Fees",
      defaultValue: "0.00",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "rateOfIntWithoutValidation" },
      name: "fromPayoutRate",
      label: "From Rate of Payout",
      placeholder: "From Rate of Payout",
      defaultValue: "0.00",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "rateOfIntWithoutValidation" },
      name: "toPayoutRate",
      label: "To Rate of Payout",
      placeholder: "To Rate of Payout",
      GridProps: { xs: 12, md: 3, sm: 3 },
      defaultValue: "0.00",
      dependentFields: ["fromPayoutRate"],
      runValidationOnDependentFieldsChange: true,
      validate: {
        conditions: {
          all: [
            {
              fact: "dependentFields",
              path: "$.fromPayoutRate.value",
              operator: "lessThanInclusiveString",
              value: { fact: "currentField", path: "$.value" },
            },
          ],
        },
        success: "",
        failure:
          "To Rate of Payout should be greater than From Rate of Payout.",
      },
    },
  ],
};
