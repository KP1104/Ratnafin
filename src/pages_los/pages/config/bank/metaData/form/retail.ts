export const retailFormMetaData = {
  form: {
    name: "bankMasterRetailHome",
    label: "Bank Master for Retail Home",
    resetFieldOnUmnount: false,
    validationRun: "onBlur",
    submitAction: "home",
    render: {
      ordering: "auto",
      renderType: "simple",
      gridConfig: {
        item: { xs: 12, sm: 4, md: 4 },
        container: { direction: "row", spacing: 2 },
      },
    },
    componentProps: {
      textField: { fullWidth: true },
      select: { fullWidth: true },
      datePicker: { fullWidth: true },
      numberFormat: { fullWidth: true },
      inputMask: { fullWidth: true },
    },
  },
  fields: [
    {
      render: { componentType: "autocomplete" },
      name: "bankTranCode",
      label: "Name of Bank",
      placeholder: "Select Name of Bank",
      required: true,
      defaultValue: "00",
      options: "getBankList",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "textField" },
      name: "branchName",
      label: "Branch Name",
      placeholder: "Branch Name",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "select" },
      name: "employeeCode",
      label: "Employement Type",
      defaultValue: "00",
      placeholder: "Employement Type",
      options: "getRetailEmployee",
      disableCaching: true,
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "select" },
      name: "productId",
      label: "Product Name",
      placeholder: "Product Name",
      defaultValue: "12300001",
      options: "getProductTypeForBank",
      isReadOnly: true,
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "select" },
      name: "subProduct1",
      label: "Sub Product 1",
      defaultValue: "00",
      placeholder: "Sub Product 1",
      dependentFields: ["productId"],
      options: "getBankSubProductType",
      disableCaching: true,
      multiple: true,
      showCheckbox: true,
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "currency" },
      name: "minSalary",
      label: "Salary (Min)",
      placeholder: "Salary (Min)",
      dependentFields: ["employeeCode"],
      shouldExclude: "shouldShowRetailHomeLAPSalariedField",
      disableCaching: true,
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "currency" },
      name: "netProfit",
      label: "Net Profit",
      placeholder: "Net Profit",
      dependentFields: ["employeeCode", "productId"],
      shouldExclude: "shouldShowRetailHomeEmployementField",
      disableCaching: true,
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "textField" },
      name: "minAge",
      label: "Min Age",
      placeholder: "Min Age",
      type: "number",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "textField" },
      name: "maxAge",
      label: "Max Age",
      placeholder: "Max Age",
      type: "number",
      dependentFields: ["minAge"],
      validate: {
        conditions: {
          all: [
            {
              fact: "dependentFields",
              path: "$.minAge.value",
              operator: "lessThanInclusiveString",
              value: { fact: "currentField", path: "$.value" },
            },
          ],
        },
        success: "",
        failure: "Max Age should be greate than Min Age.",
      },
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "textField" },
      name: "experience",
      label: "Total Experience",
      placeholder: "Total Experience",
      maxLength: 3,
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "textField" },
      name: "creditScore",
      label: "Credit Score",
      placeholder: "Credit Score",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "select" },
      name: "propertyType",
      label: "Property Type",
      placeholder: "Property Type",
      dependentFields: ["productId"],
      options: "getProductTypeForProductName",
      postValidationSetCrossFieldValues: "setLTVValue",
      disableCaching: true,
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "currency" },
      name: "propertyValue",
      label: "Property Value",
      placeholder: "Property Value",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "rateOfInt" },
      name: "minLTV",
      label: "LTV Min",
      placeholder: "LTV Min",
      isReadOnly: true,
      required: true,
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "rateOfInt" },
      name: "maxLTV",
      label: "LTV Max",
      placeholder: "LTV Max",
      isReadOnly: true,
      required: true,
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "currency" },
      name: "minLoanAmount",
      label: "Loan Amount(Min)",
      placeholder: "Loan Amount(Min)",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "rateOfInt" },
      name: "minRate",
      label: "ROI (Min) (in Lakh)",
      placeholder: "ROI (Min) (in Lakh)",
      required: true,
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "textField" },
      name: "minTenor",
      label: "Tenor (Min)",
      placeholder: "Tenor (Min)",
      maxLength: 3,
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "textField" },
      name: "maxTenor",
      label: "Tenor (Max)",
      placeholder: "Tenor (Max)",
      maxLength: 3,
      dependentFields: ["minTenor"],
      validate: {
        conditions: {
          all: [
            {
              fact: "dependentFields",
              path: "$.minTenor.value",
              operator: "lessThanInclusiveString",
              value: { fact: "currentField", path: "$.value" },
            },
          ],
        },
        success: "",
        failure: "Tenor Max should be greater than Tenor Min.",
      },
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "select" },
      name: "weHavePayout",
      label: "Whether We have Payout?",
      placeholder: "Whether We have Payout?",
      options: "getYesOrNoOptions",
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "rateOfInt" },
      name: "fromPayoutRate",
      label: "From Rate of Payout",
      placeholder: "From Rate of Payout",
      required: true,
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
    {
      render: { componentType: "rateOfInt" },
      name: "toPayoutRate",
      label: "To Rate of Payout",
      placeholder: "To Rate of Payout",
      required: true,
      GridProps: { xs: 12, md: 3, sm: 3 },
    },
  ],
};
