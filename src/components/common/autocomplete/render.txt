// import { Fragment, ComponentType, HTMLAttributes, lazy, Suspense } from "react";
// import { TextFieldProps } from "@material-ui/core/TextField";
// import Grid, { GridProps } from "@material-ui/core/Grid";
// import CircularProgress, {
//   CircularProgressProps,
// } from "@material-ui/core/CircularProgress";
// import Autocomplete, {
//   AutocompleteProps,
//   createFilterOptions,
// } from "@material-ui/lab/Autocomplete";
// import { CreateFilterOptionsConfig } from "@material-ui/lab/useAutocomplete";
// import { Checkbox } from "components/styledComponent/checkbox";
// import { TextField } from "components/styledComponent/textfield";
// import { useField, UseFieldHookProps } from "packages/form";
// import { Merge, OptionsProps, dependentOptionsFn } from "../types";
// import Chip, { ChipProps } from "@material-ui/core/Chip";
// import match from "autosuggest-highlight/match";
// import parse from "autosuggest-highlight/parse";

// const ListBoxComponentVirtualized = lazy(() =>
//   import("./virtualized").then((module) => ({
//     default: module.ListBoxComponent,
//   }))
// );

// const MyAutocomplete = ({
//   multiple,
//   freeSolo,
//   showCheckbox,
//   enableVirtualized,
//   handleChange,
//   handleBlur,
//   isSubmitting,
//   TextFieldProps,
//   ...others
// }) => {
//   const getOptionLabel = (option: OptionsProps) => option?.label ?? "";
//   const getOptionValue = (option: OptionsProps) => option?.value ?? "";

//   return (
//     <Suspense fallback={"loading..."}>
//       <Autocomplete
//         {...others}
//         getOptionLabel={getOptionLabel}
//         ListboxComponent={
//           Boolean(enableVirtualized)
//             ? (ListBoxComponentVirtualized as ComponentType<
//                 HTMLAttributes<HTMLElement>
//               >)
//             : undefined
//         }
//         onChange={(_, value) => {
//           if (!Array.isArray(value)) {
//             value = [value];
//           }
//           value = value.map((one) => {
//             if (typeof one === "object") {
//               if (!Boolean(freeSolo)) {
//                 return getOptionValue(one);
//               }
//               return getOptionLabel(one);
//             }
//             return one;
//           });

//           if (!Boolean(multiple) && Array.isArray(value)) {
//             //@ts-ignore
//             handleChange(value[0]);
//           } else {
//             handleChange(value);
//           }
//         }}
//         onBlur={handleBlur}
//         disabled={isSubmitting}
//         filterOptions={
//           Boolean(CreateFilterOptionsConfig) &&
//           typeof CreateFilterOptionsConfig === "object"
//             ? createFilterOptions(CreateFilterOptionsConfig)
//             : undefined
//         }
//         renderTags={(value, getTagProps) => {
//           return value.map((option, index) => {
//             if (typeof option === "string") {
//               return (
//                 <Chip
//                   key={option}
//                   variant="outlined"
//                   {...ChipProps}
//                   label={option}
//                   {...getTagProps({ index })}
//                 />
//               );
//             }
//             return (
//               <Chip
//                 key={`${option.label}-${index}`}
//                 variant="outlined"
//                 {...ChipProps}
//                 label={option.label}
//                 {...getTagProps({ index })}
//               />
//             );
//           });
//         }}
//         renderInput={(params) => (
//           <TextField
//             {...TextFieldProps}
//             {...params}
//             value={inputValue}
//             autoComplete="disabled"
//             onChange={(e) => setInputValue(e.target.value)}
//             type="text"
//             error={isError}
//             required={required}
//             helperText={isError ? error : null}
//             InputProps={{
//               ...params.InputProps,
//               endAdornment: (
//                 <Fragment>
//                   {validationRunning || loadingOptions ? (
//                     <CircularProgress
//                       color="primary"
//                       variant="indeterminate"
//                       {...CircularProgressProps}
//                     />
//                   ) : null}
//                   {params.InputProps.endAdornment}
//                 </Fragment>
//               ),
//             }}
//             InputLabelProps={{
//               shrink: true,
//             }}
//             inputProps={{
//               ...params.inputProps,
//               autoComplete: "new-user-street-address",
//             }}
//           />
//         )}
//         renderOption={(option, { selected }) => {
//           let label = getOptionLabel(option);
//           const matches = match(label, inputValue);
//           const parts = parse(label, matches);
//           const labelJSX = parts.map((part, index) => (
//             <span
//               key={index}
//               style={{ fontWeight: part.highlight ? 700 : 400 }}
//             >
//               {part.text}
//             </span>
//           ));
//           return (
//             <Fragment>
//               {showCheckbox ? <Checkbox checked={selected} /> : null}
//               {labelJSX}
//             </Fragment>
//           );
//         }}
//       />
//     </Suspense>
//   );
// };
